// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// PlaySessionMediaDelete is the builder for deleting a PlaySessionMedia entity.
type PlaySessionMediaDelete struct {
	config
	hooks    []Hook
	mutation *PlaySessionMediaMutation
}

// Where appends a list predicates to the PlaySessionMediaDelete builder.
func (psmd *PlaySessionMediaDelete) Where(ps ...predicate.PlaySessionMedia) *PlaySessionMediaDelete {
	psmd.mutation.Where(ps...)
	return psmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (psmd *PlaySessionMediaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, psmd.sqlExec, psmd.mutation, psmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (psmd *PlaySessionMediaDelete) ExecX(ctx context.Context) int {
	n, err := psmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (psmd *PlaySessionMediaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(playsessionmedia.Table, sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt))
	if ps := psmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, psmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	psmd.mutation.done = true
	return affected, err
}

// PlaySessionMediaDeleteOne is the builder for deleting a single PlaySessionMedia entity.
type PlaySessionMediaDeleteOne struct {
	psmd *PlaySessionMediaDelete
}

// Where appends a list predicates to the PlaySessionMediaDelete builder.
func (psmdo *PlaySessionMediaDeleteOne) Where(ps ...predicate.PlaySessionMedia) *PlaySessionMediaDeleteOne {
	psmdo.psmd.mutation.Where(ps...)
	return psmdo
}

// Exec executes the deletion query.
func (psmdo *PlaySessionMediaDeleteOne) Exec(ctx context.Context) error {
	n, err := psmdo.psmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{playsessionmedia.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (psmdo *PlaySessionMediaDeleteOne) ExecX(ctx context.Context) {
	if err := psmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
