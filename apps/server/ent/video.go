// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/library"
	"github.com/altierawr/vstreamer/ent/video"
)

// Video is the model entity for the Video schema.
type Video struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VideoQuery when eager-loading is set.
	Edges          VideoEdges `json:"edges"`
	library_videos *int
	selectValues   sql.SelectValues
}

// VideoEdges holds the relations/edges for other nodes in the graph.
type VideoEdges struct {
	// PlaySessionMedias holds the value of the play_session_medias edge.
	PlaySessionMedias []*PlaySessionMedia `json:"play_session_medias,omitempty"`
	// Library holds the value of the library edge.
	Library *Library `json:"library,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPlaySessionMedias map[string][]*PlaySessionMedia
}

// PlaySessionMediasOrErr returns the PlaySessionMedias value or an error if the edge
// was not loaded in eager-loading.
func (e VideoEdges) PlaySessionMediasOrErr() ([]*PlaySessionMedia, error) {
	if e.loadedTypes[0] {
		return e.PlaySessionMedias, nil
	}
	return nil, &NotLoadedError{edge: "play_session_medias"}
}

// LibraryOrErr returns the Library value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VideoEdges) LibraryOrErr() (*Library, error) {
	if e.Library != nil {
		return e.Library, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: library.Label}
	}
	return nil, &NotLoadedError{edge: "library"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Video) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			values[i] = new(sql.NullInt64)
		case video.FieldPath:
			values[i] = new(sql.NullString)
		case video.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case video.ForeignKeys[0]: // library_videos
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Video fields.
func (v *Video) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case video.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case video.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				v.Path = value.String
			}
		case video.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case video.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field library_videos", value)
			} else if value.Valid {
				v.library_videos = new(int)
				*v.library_videos = int(value.Int64)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Video.
// This includes values selected through modifiers, order, etc.
func (v *Video) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryPlaySessionMedias queries the "play_session_medias" edge of the Video entity.
func (v *Video) QueryPlaySessionMedias() *PlaySessionMediaQuery {
	return NewVideoClient(v.config).QueryPlaySessionMedias(v)
}

// QueryLibrary queries the "library" edge of the Video entity.
func (v *Video) QueryLibrary() *LibraryQuery {
	return NewVideoClient(v.config).QueryLibrary(v)
}

// Update returns a builder for updating this Video.
// Note that you need to call Video.Unwrap() before calling this method if this Video
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Video) Update() *VideoUpdateOne {
	return NewVideoClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Video entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Video) Unwrap() *Video {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Video is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Video) String() string {
	var builder strings.Builder
	builder.WriteString("Video(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("path=")
	builder.WriteString(v.Path)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPlaySessionMedias returns the PlaySessionMedias named value or an error if the edge was not
// loaded in eager-loading with this name.
func (v *Video) NamedPlaySessionMedias(name string) ([]*PlaySessionMedia, error) {
	if v.Edges.namedPlaySessionMedias == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := v.Edges.namedPlaySessionMedias[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (v *Video) appendNamedPlaySessionMedias(name string, edges ...*PlaySessionMedia) {
	if v.Edges.namedPlaySessionMedias == nil {
		v.Edges.namedPlaySessionMedias = make(map[string][]*PlaySessionMedia)
	}
	if len(edges) == 0 {
		v.Edges.namedPlaySessionMedias[name] = []*PlaySessionMedia{}
	} else {
		v.Edges.namedPlaySessionMedias[name] = append(v.Edges.namedPlaySessionMedias[name], edges...)
	}
}

// Videos is a parsable slice of Video.
type Videos []*Video
