// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/stream"
)

// StreamCreate is the builder for creating a Stream entity.
type StreamCreate struct {
	config
	mutation *StreamMutation
	hooks    []Hook
}

// SetWidth sets the "width" field.
func (sc *StreamCreate) SetWidth(i int) *StreamCreate {
	sc.mutation.SetWidth(i)
	return sc
}

// SetHeight sets the "height" field.
func (sc *StreamCreate) SetHeight(i int) *StreamCreate {
	sc.mutation.SetHeight(i)
	return sc
}

// SetContainer sets the "container" field.
func (sc *StreamCreate) SetContainer(s string) *StreamCreate {
	sc.mutation.SetContainer(s)
	return sc
}

// SetVideoCodec sets the "video_codec" field.
func (sc *StreamCreate) SetVideoCodec(s string) *StreamCreate {
	sc.mutation.SetVideoCodec(s)
	return sc
}

// SetAudioCodec sets the "audio_codec" field.
func (sc *StreamCreate) SetAudioCodec(s string) *StreamCreate {
	sc.mutation.SetAudioCodec(s)
	return sc
}

// SetSegmentDuration sets the "segment_duration" field.
func (sc *StreamCreate) SetSegmentDuration(i int) *StreamCreate {
	sc.mutation.SetSegmentDuration(i)
	return sc
}

// SetQuality sets the "quality" field.
func (sc *StreamCreate) SetQuality(s stream.Quality) *StreamCreate {
	sc.mutation.SetQuality(s)
	return sc
}

// SetType sets the "type" field.
func (sc *StreamCreate) SetType(s stream.Type) *StreamCreate {
	sc.mutation.SetType(s)
	return sc
}

// Mutation returns the StreamMutation object of the builder.
func (sc *StreamCreate) Mutation() *StreamMutation {
	return sc.mutation
}

// Save creates the Stream in the database.
func (sc *StreamCreate) Save(ctx context.Context) (*Stream, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StreamCreate) SaveX(ctx context.Context) *Stream {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StreamCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StreamCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StreamCreate) check() error {
	if _, ok := sc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Stream.width"`)}
	}
	if _, ok := sc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Stream.height"`)}
	}
	if _, ok := sc.mutation.Container(); !ok {
		return &ValidationError{Name: "container", err: errors.New(`ent: missing required field "Stream.container"`)}
	}
	if _, ok := sc.mutation.VideoCodec(); !ok {
		return &ValidationError{Name: "video_codec", err: errors.New(`ent: missing required field "Stream.video_codec"`)}
	}
	if _, ok := sc.mutation.AudioCodec(); !ok {
		return &ValidationError{Name: "audio_codec", err: errors.New(`ent: missing required field "Stream.audio_codec"`)}
	}
	if _, ok := sc.mutation.SegmentDuration(); !ok {
		return &ValidationError{Name: "segment_duration", err: errors.New(`ent: missing required field "Stream.segment_duration"`)}
	}
	if _, ok := sc.mutation.Quality(); !ok {
		return &ValidationError{Name: "quality", err: errors.New(`ent: missing required field "Stream.quality"`)}
	}
	if v, ok := sc.mutation.Quality(); ok {
		if err := stream.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Stream.quality": %w`, err)}
		}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Stream.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	return nil
}

func (sc *StreamCreate) sqlSave(ctx context.Context) (*Stream, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StreamCreate) createSpec() (*Stream, *sqlgraph.CreateSpec) {
	var (
		_node = &Stream{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(stream.Table, sqlgraph.NewFieldSpec(stream.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Width(); ok {
		_spec.SetField(stream.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := sc.mutation.Height(); ok {
		_spec.SetField(stream.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if value, ok := sc.mutation.Container(); ok {
		_spec.SetField(stream.FieldContainer, field.TypeString, value)
		_node.Container = value
	}
	if value, ok := sc.mutation.VideoCodec(); ok {
		_spec.SetField(stream.FieldVideoCodec, field.TypeString, value)
		_node.VideoCodec = value
	}
	if value, ok := sc.mutation.AudioCodec(); ok {
		_spec.SetField(stream.FieldAudioCodec, field.TypeString, value)
		_node.AudioCodec = value
	}
	if value, ok := sc.mutation.SegmentDuration(); ok {
		_spec.SetField(stream.FieldSegmentDuration, field.TypeInt, value)
		_node.SegmentDuration = value
	}
	if value, ok := sc.mutation.Quality(); ok {
		_spec.SetField(stream.FieldQuality, field.TypeEnum, value)
		_node.Quality = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	return _node, _spec
}

// StreamCreateBulk is the builder for creating many Stream entities in bulk.
type StreamCreateBulk struct {
	config
	err      error
	builders []*StreamCreate
}

// Save creates the Stream entities in the database.
func (scb *StreamCreateBulk) Save(ctx context.Context) ([]*Stream, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stream, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StreamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StreamCreateBulk) SaveX(ctx context.Context) []*Stream {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StreamCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StreamCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
