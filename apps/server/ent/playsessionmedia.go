// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/video"
)

// PlaySessionMedia is the model entity for the PlaySessionMedia schema.
type PlaySessionMedia struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VideoCodecs holds the value of the "video_codecs" field.
	VideoCodecs []string `json:"video_codecs,omitempty"`
	// Resolutions holds the value of the "resolutions" field.
	Resolutions []string `json:"resolutions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaySessionMediaQuery when eager-loading is set.
	Edges                     PlaySessionMediaEdges `json:"edges"`
	play_session_media        *int
	video_play_session_medias *int
	selectValues              sql.SelectValues
}

// PlaySessionMediaEdges holds the relations/edges for other nodes in the graph.
type PlaySessionMediaEdges struct {
	// AudioTracks holds the value of the audio_tracks edge.
	AudioTracks []*AudioTrack `json:"audio_tracks,omitempty"`
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// Session holds the value of the session edge.
	Session *PlaySession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedAudioTracks map[string][]*AudioTrack
}

// AudioTracksOrErr returns the AudioTracks value or an error if the edge
// was not loaded in eager-loading.
func (e PlaySessionMediaEdges) AudioTracksOrErr() ([]*AudioTrack, error) {
	if e.loadedTypes[0] {
		return e.AudioTracks, nil
	}
	return nil, &NotLoadedError{edge: "audio_tracks"}
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaySessionMediaEdges) VideoOrErr() (*Video, error) {
	if e.Video != nil {
		return e.Video, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: video.Label}
	}
	return nil, &NotLoadedError{edge: "video"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaySessionMediaEdges) SessionOrErr() (*PlaySession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: playsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaySessionMedia) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playsessionmedia.FieldVideoCodecs, playsessionmedia.FieldResolutions:
			values[i] = new([]byte)
		case playsessionmedia.FieldID:
			values[i] = new(sql.NullInt64)
		case playsessionmedia.ForeignKeys[0]: // play_session_media
			values[i] = new(sql.NullInt64)
		case playsessionmedia.ForeignKeys[1]: // video_play_session_medias
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaySessionMedia fields.
func (psm *PlaySessionMedia) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playsessionmedia.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			psm.ID = int(value.Int64)
		case playsessionmedia.FieldVideoCodecs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field video_codecs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &psm.VideoCodecs); err != nil {
					return fmt.Errorf("unmarshal field video_codecs: %w", err)
				}
			}
		case playsessionmedia.FieldResolutions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resolutions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &psm.Resolutions); err != nil {
					return fmt.Errorf("unmarshal field resolutions: %w", err)
				}
			}
		case playsessionmedia.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field play_session_media", value)
			} else if value.Valid {
				psm.play_session_media = new(int)
				*psm.play_session_media = int(value.Int64)
			}
		case playsessionmedia.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field video_play_session_medias", value)
			} else if value.Valid {
				psm.video_play_session_medias = new(int)
				*psm.video_play_session_medias = int(value.Int64)
			}
		default:
			psm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlaySessionMedia.
// This includes values selected through modifiers, order, etc.
func (psm *PlaySessionMedia) Value(name string) (ent.Value, error) {
	return psm.selectValues.Get(name)
}

// QueryAudioTracks queries the "audio_tracks" edge of the PlaySessionMedia entity.
func (psm *PlaySessionMedia) QueryAudioTracks() *AudioTrackQuery {
	return NewPlaySessionMediaClient(psm.config).QueryAudioTracks(psm)
}

// QueryVideo queries the "video" edge of the PlaySessionMedia entity.
func (psm *PlaySessionMedia) QueryVideo() *VideoQuery {
	return NewPlaySessionMediaClient(psm.config).QueryVideo(psm)
}

// QuerySession queries the "session" edge of the PlaySessionMedia entity.
func (psm *PlaySessionMedia) QuerySession() *PlaySessionQuery {
	return NewPlaySessionMediaClient(psm.config).QuerySession(psm)
}

// Update returns a builder for updating this PlaySessionMedia.
// Note that you need to call PlaySessionMedia.Unwrap() before calling this method if this PlaySessionMedia
// was returned from a transaction, and the transaction was committed or rolled back.
func (psm *PlaySessionMedia) Update() *PlaySessionMediaUpdateOne {
	return NewPlaySessionMediaClient(psm.config).UpdateOne(psm)
}

// Unwrap unwraps the PlaySessionMedia entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psm *PlaySessionMedia) Unwrap() *PlaySessionMedia {
	_tx, ok := psm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaySessionMedia is not a transactional entity")
	}
	psm.config.driver = _tx.drv
	return psm
}

// String implements the fmt.Stringer.
func (psm *PlaySessionMedia) String() string {
	var builder strings.Builder
	builder.WriteString("PlaySessionMedia(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psm.ID))
	builder.WriteString("video_codecs=")
	builder.WriteString(fmt.Sprintf("%v", psm.VideoCodecs))
	builder.WriteString(", ")
	builder.WriteString("resolutions=")
	builder.WriteString(fmt.Sprintf("%v", psm.Resolutions))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAudioTracks returns the AudioTracks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (psm *PlaySessionMedia) NamedAudioTracks(name string) ([]*AudioTrack, error) {
	if psm.Edges.namedAudioTracks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := psm.Edges.namedAudioTracks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (psm *PlaySessionMedia) appendNamedAudioTracks(name string, edges ...*AudioTrack) {
	if psm.Edges.namedAudioTracks == nil {
		psm.Edges.namedAudioTracks = make(map[string][]*AudioTrack)
	}
	if len(edges) == 0 {
		psm.Edges.namedAudioTracks[name] = []*AudioTrack{}
	} else {
		psm.Edges.namedAudioTracks[name] = append(psm.Edges.namedAudioTracks[name], edges...)
	}
}

// PlaySessionMediaSlice is a parsable slice of PlaySessionMedia.
type PlaySessionMediaSlice []*PlaySessionMedia
