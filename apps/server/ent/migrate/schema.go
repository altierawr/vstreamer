// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AudioTracksColumns holds the columns for the "audio_tracks" table.
	AudioTracksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "nr_channels", Type: field.TypeInt},
		{Name: "channel_layout", Type: field.TypeString},
		{Name: "language", Type: field.TypeString, Nullable: true},
		{Name: "codecs", Type: field.TypeJSON},
		{Name: "play_session_media_audio_tracks", Type: field.TypeInt},
	}
	// AudioTracksTable holds the schema information for the "audio_tracks" table.
	AudioTracksTable = &schema.Table{
		Name:       "audio_tracks",
		Columns:    AudioTracksColumns,
		PrimaryKey: []*schema.Column{AudioTracksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "audio_tracks_play_session_media_audio_tracks",
				Columns:    []*schema.Column{AudioTracksColumns[6]},
				RefColumns: []*schema.Column{PlaySessionMediaColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LibrariesColumns holds the columns for the "libraries" table.
	LibrariesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// LibrariesTable holds the schema information for the "libraries" table.
	LibrariesTable = &schema.Table{
		Name:       "libraries",
		Columns:    LibrariesColumns,
		PrimaryKey: []*schema.Column{LibrariesColumns[0]},
	}
	// PlaySessionsColumns holds the columns for the "play_sessions" table.
	PlaySessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "current_time", Type: field.TypeInt, Nullable: true},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"PLAYING", "PAUSED", "BUFFERING", "STOPPED"}, Default: "STOPPED"},
	}
	// PlaySessionsTable holds the schema information for the "play_sessions" table.
	PlaySessionsTable = &schema.Table{
		Name:       "play_sessions",
		Columns:    PlaySessionsColumns,
		PrimaryKey: []*schema.Column{PlaySessionsColumns[0]},
	}
	// PlaySessionMediaColumns holds the columns for the "play_session_media" table.
	PlaySessionMediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "resolutions", Type: field.TypeJSON},
		{Name: "play_session_media", Type: field.TypeInt, Unique: true},
		{Name: "video_play_session_medias", Type: field.TypeInt, Nullable: true},
	}
	// PlaySessionMediaTable holds the schema information for the "play_session_media" table.
	PlaySessionMediaTable = &schema.Table{
		Name:       "play_session_media",
		Columns:    PlaySessionMediaColumns,
		PrimaryKey: []*schema.Column{PlaySessionMediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "play_session_media_play_sessions_media",
				Columns:    []*schema.Column{PlaySessionMediaColumns[2]},
				RefColumns: []*schema.Column{PlaySessionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "play_session_media_videos_play_session_medias",
				Columns:    []*schema.Column{PlaySessionMediaColumns[3]},
				RefColumns: []*schema.Column{VideosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PlaybackClientsColumns holds the columns for the "playback_clients" table.
	PlaybackClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_buffered", Type: field.TypeBool, Default: false},
		{Name: "play_session_clients", Type: field.TypeInt, Nullable: true},
	}
	// PlaybackClientsTable holds the schema information for the "playback_clients" table.
	PlaybackClientsTable = &schema.Table{
		Name:       "playback_clients",
		Columns:    PlaybackClientsColumns,
		PrimaryKey: []*schema.Column{PlaybackClientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "playback_clients_play_sessions_clients",
				Columns:    []*schema.Column{PlaybackClientsColumns[2]},
				RefColumns: []*schema.Column{PlaySessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StreamsColumns holds the columns for the "streams" table.
	StreamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "width", Type: field.TypeInt},
		{Name: "height", Type: field.TypeInt},
		{Name: "container", Type: field.TypeString},
		{Name: "video_codec", Type: field.TypeString},
		{Name: "audio_codec", Type: field.TypeString},
		{Name: "segment_duration", Type: field.TypeInt},
		{Name: "quality", Type: field.TypeEnum, Enums: []string{"maximum", "medium", "low"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"direct", "remux", "video_transcode", "audio_transcode", "full_transcode"}},
	}
	// StreamsTable holds the schema information for the "streams" table.
	StreamsTable = &schema.Table{
		Name:       "streams",
		Columns:    StreamsColumns,
		PrimaryKey: []*schema.Column{StreamsColumns[0]},
	}
	// VideosColumns holds the columns for the "videos" table.
	VideosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "library_videos", Type: field.TypeInt, Nullable: true},
	}
	// VideosTable holds the schema information for the "videos" table.
	VideosTable = &schema.Table{
		Name:       "videos",
		Columns:    VideosColumns,
		PrimaryKey: []*schema.Column{VideosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "videos_libraries_videos",
				Columns:    []*schema.Column{VideosColumns[3]},
				RefColumns: []*schema.Column{LibrariesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// VideoCodecsColumns holds the columns for the "video_codecs" table.
	VideoCodecsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "mime", Type: field.TypeString},
		{Name: "dynamic_range", Type: field.TypeEnum, Enums: []string{"sdr", "hdr"}},
		{Name: "play_session_media_video_codecs", Type: field.TypeInt, Nullable: true},
	}
	// VideoCodecsTable holds the schema information for the "video_codecs" table.
	VideoCodecsTable = &schema.Table{
		Name:       "video_codecs",
		Columns:    VideoCodecsColumns,
		PrimaryKey: []*schema.Column{VideoCodecsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "video_codecs_play_session_media_video_codecs",
				Columns:    []*schema.Column{VideoCodecsColumns[4]},
				RefColumns: []*schema.Column{PlaySessionMediaColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AudioTracksTable,
		LibrariesTable,
		PlaySessionsTable,
		PlaySessionMediaTable,
		PlaybackClientsTable,
		StreamsTable,
		VideosTable,
		VideoCodecsTable,
	}
)

func init() {
	AudioTracksTable.ForeignKeys[0].RefTable = PlaySessionMediaTable
	PlaySessionMediaTable.ForeignKeys[0].RefTable = PlaySessionsTable
	PlaySessionMediaTable.ForeignKeys[1].RefTable = VideosTable
	PlaybackClientsTable.ForeignKeys[0].RefTable = PlaySessionsTable
	VideosTable.ForeignKeys[0].RefTable = LibrariesTable
	VideoCodecsTable.ForeignKeys[0].RefTable = PlaySessionMediaTable
}
