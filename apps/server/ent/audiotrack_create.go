// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/audiocodec"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
)

// AudioTrackCreate is the builder for creating a AudioTrack entity.
type AudioTrackCreate struct {
	config
	mutation *AudioTrackMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (atc *AudioTrackCreate) SetName(s string) *AudioTrackCreate {
	atc.mutation.SetName(s)
	return atc
}

// SetNrChannels sets the "nr_channels" field.
func (atc *AudioTrackCreate) SetNrChannels(i int) *AudioTrackCreate {
	atc.mutation.SetNrChannels(i)
	return atc
}

// SetChannelLayout sets the "channel_layout" field.
func (atc *AudioTrackCreate) SetChannelLayout(s string) *AudioTrackCreate {
	atc.mutation.SetChannelLayout(s)
	return atc
}

// SetLanguage sets the "language" field.
func (atc *AudioTrackCreate) SetLanguage(s string) *AudioTrackCreate {
	atc.mutation.SetLanguage(s)
	return atc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (atc *AudioTrackCreate) SetNillableLanguage(s *string) *AudioTrackCreate {
	if s != nil {
		atc.SetLanguage(*s)
	}
	return atc
}

// AddCodecIDs adds the "codecs" edge to the AudioCodec entity by IDs.
func (atc *AudioTrackCreate) AddCodecIDs(ids ...int) *AudioTrackCreate {
	atc.mutation.AddCodecIDs(ids...)
	return atc
}

// AddCodecs adds the "codecs" edges to the AudioCodec entity.
func (atc *AudioTrackCreate) AddCodecs(a ...*AudioCodec) *AudioTrackCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atc.AddCodecIDs(ids...)
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (atc *AudioTrackCreate) SetMediaID(id int) *AudioTrackCreate {
	atc.mutation.SetMediaID(id)
	return atc
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (atc *AudioTrackCreate) SetMedia(p *PlaySessionMedia) *AudioTrackCreate {
	return atc.SetMediaID(p.ID)
}

// Mutation returns the AudioTrackMutation object of the builder.
func (atc *AudioTrackCreate) Mutation() *AudioTrackMutation {
	return atc.mutation
}

// Save creates the AudioTrack in the database.
func (atc *AudioTrackCreate) Save(ctx context.Context) (*AudioTrack, error) {
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AudioTrackCreate) SaveX(ctx context.Context) *AudioTrack {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AudioTrackCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AudioTrackCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AudioTrackCreate) check() error {
	if _, ok := atc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AudioTrack.name"`)}
	}
	if _, ok := atc.mutation.NrChannels(); !ok {
		return &ValidationError{Name: "nr_channels", err: errors.New(`ent: missing required field "AudioTrack.nr_channels"`)}
	}
	if _, ok := atc.mutation.ChannelLayout(); !ok {
		return &ValidationError{Name: "channel_layout", err: errors.New(`ent: missing required field "AudioTrack.channel_layout"`)}
	}
	if _, ok := atc.mutation.MediaID(); !ok {
		return &ValidationError{Name: "media", err: errors.New(`ent: missing required edge "AudioTrack.media"`)}
	}
	return nil
}

func (atc *AudioTrackCreate) sqlSave(ctx context.Context) (*AudioTrack, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AudioTrackCreate) createSpec() (*AudioTrack, *sqlgraph.CreateSpec) {
	var (
		_node = &AudioTrack{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(audiotrack.Table, sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt))
	)
	if value, ok := atc.mutation.Name(); ok {
		_spec.SetField(audiotrack.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := atc.mutation.NrChannels(); ok {
		_spec.SetField(audiotrack.FieldNrChannels, field.TypeInt, value)
		_node.NrChannels = value
	}
	if value, ok := atc.mutation.ChannelLayout(); ok {
		_spec.SetField(audiotrack.FieldChannelLayout, field.TypeString, value)
		_node.ChannelLayout = value
	}
	if value, ok := atc.mutation.Language(); ok {
		_spec.SetField(audiotrack.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if nodes := atc.mutation.CodecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   audiotrack.CodecsTable,
			Columns: audiotrack.CodecsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audiotrack.MediaTable,
			Columns: []string{audiotrack.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.play_session_media_audio_tracks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AudioTrackCreateBulk is the builder for creating many AudioTrack entities in bulk.
type AudioTrackCreateBulk struct {
	config
	err      error
	builders []*AudioTrackCreate
}

// Save creates the AudioTrack entities in the database.
func (atcb *AudioTrackCreateBulk) Save(ctx context.Context) ([]*AudioTrack, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AudioTrack, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AudioTrackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AudioTrackCreateBulk) SaveX(ctx context.Context) []*AudioTrack {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AudioTrackCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AudioTrackCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
