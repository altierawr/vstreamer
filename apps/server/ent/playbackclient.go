// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/playbackclient"
	"github.com/altierawr/vstreamer/ent/playsession"
)

// PlaybackClient is the model entity for the PlaybackClient schema.
type PlaybackClient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IsBuffered holds the value of the "is_buffered" field.
	IsBuffered bool `json:"is_buffered,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaybackClientQuery when eager-loading is set.
	Edges                PlaybackClientEdges `json:"edges"`
	play_session_clients *int
	selectValues         sql.SelectValues
}

// PlaybackClientEdges holds the relations/edges for other nodes in the graph.
type PlaybackClientEdges struct {
	// Session holds the value of the session edge.
	Session *PlaySession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaybackClientEdges) SessionOrErr() (*PlaySession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: playsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaybackClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playbackclient.FieldIsBuffered:
			values[i] = new(sql.NullBool)
		case playbackclient.FieldID:
			values[i] = new(sql.NullInt64)
		case playbackclient.ForeignKeys[0]: // play_session_clients
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaybackClient fields.
func (pc *PlaybackClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playbackclient.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case playbackclient.FieldIsBuffered:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_buffered", values[i])
			} else if value.Valid {
				pc.IsBuffered = value.Bool
			}
		case playbackclient.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field play_session_clients", value)
			} else if value.Valid {
				pc.play_session_clients = new(int)
				*pc.play_session_clients = int(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlaybackClient.
// This includes values selected through modifiers, order, etc.
func (pc *PlaybackClient) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the PlaybackClient entity.
func (pc *PlaybackClient) QuerySession() *PlaySessionQuery {
	return NewPlaybackClientClient(pc.config).QuerySession(pc)
}

// Update returns a builder for updating this PlaybackClient.
// Note that you need to call PlaybackClient.Unwrap() before calling this method if this PlaybackClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PlaybackClient) Update() *PlaybackClientUpdateOne {
	return NewPlaybackClientClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PlaybackClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PlaybackClient) Unwrap() *PlaybackClient {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaybackClient is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PlaybackClient) String() string {
	var builder strings.Builder
	builder.WriteString("PlaybackClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("is_buffered=")
	builder.WriteString(fmt.Sprintf("%v", pc.IsBuffered))
	builder.WriteByte(')')
	return builder.String()
}

// PlaybackClients is a parsable slice of PlaybackClient.
type PlaybackClients []*PlaybackClient
