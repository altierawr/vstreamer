// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/audiocodec"
	"github.com/altierawr/vstreamer/ent/predicate"
	"github.com/altierawr/vstreamer/ent/stream"
	"github.com/altierawr/vstreamer/ent/videocodec"
)

// StreamUpdate is the builder for updating Stream entities.
type StreamUpdate struct {
	config
	hooks    []Hook
	mutation *StreamMutation
}

// Where appends a list predicates to the StreamUpdate builder.
func (su *StreamUpdate) Where(ps ...predicate.Stream) *StreamUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetWidth sets the "width" field.
func (su *StreamUpdate) SetWidth(i int) *StreamUpdate {
	su.mutation.ResetWidth()
	su.mutation.SetWidth(i)
	return su
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (su *StreamUpdate) SetNillableWidth(i *int) *StreamUpdate {
	if i != nil {
		su.SetWidth(*i)
	}
	return su
}

// AddWidth adds i to the "width" field.
func (su *StreamUpdate) AddWidth(i int) *StreamUpdate {
	su.mutation.AddWidth(i)
	return su
}

// SetHeight sets the "height" field.
func (su *StreamUpdate) SetHeight(i int) *StreamUpdate {
	su.mutation.ResetHeight()
	su.mutation.SetHeight(i)
	return su
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (su *StreamUpdate) SetNillableHeight(i *int) *StreamUpdate {
	if i != nil {
		su.SetHeight(*i)
	}
	return su
}

// AddHeight adds i to the "height" field.
func (su *StreamUpdate) AddHeight(i int) *StreamUpdate {
	su.mutation.AddHeight(i)
	return su
}

// SetContainer sets the "container" field.
func (su *StreamUpdate) SetContainer(s string) *StreamUpdate {
	su.mutation.SetContainer(s)
	return su
}

// SetNillableContainer sets the "container" field if the given value is not nil.
func (su *StreamUpdate) SetNillableContainer(s *string) *StreamUpdate {
	if s != nil {
		su.SetContainer(*s)
	}
	return su
}

// SetSegmentDuration sets the "segment_duration" field.
func (su *StreamUpdate) SetSegmentDuration(i int) *StreamUpdate {
	su.mutation.ResetSegmentDuration()
	su.mutation.SetSegmentDuration(i)
	return su
}

// SetNillableSegmentDuration sets the "segment_duration" field if the given value is not nil.
func (su *StreamUpdate) SetNillableSegmentDuration(i *int) *StreamUpdate {
	if i != nil {
		su.SetSegmentDuration(*i)
	}
	return su
}

// AddSegmentDuration adds i to the "segment_duration" field.
func (su *StreamUpdate) AddSegmentDuration(i int) *StreamUpdate {
	su.mutation.AddSegmentDuration(i)
	return su
}

// SetQuality sets the "quality" field.
func (su *StreamUpdate) SetQuality(s stream.Quality) *StreamUpdate {
	su.mutation.SetQuality(s)
	return su
}

// SetNillableQuality sets the "quality" field if the given value is not nil.
func (su *StreamUpdate) SetNillableQuality(s *stream.Quality) *StreamUpdate {
	if s != nil {
		su.SetQuality(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *StreamUpdate) SetType(s stream.Type) *StreamUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StreamUpdate) SetNillableType(s *stream.Type) *StreamUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetVideoCodecID sets the "video_codec" edge to the VideoCodec entity by ID.
func (su *StreamUpdate) SetVideoCodecID(id int) *StreamUpdate {
	su.mutation.SetVideoCodecID(id)
	return su
}

// SetNillableVideoCodecID sets the "video_codec" edge to the VideoCodec entity by ID if the given value is not nil.
func (su *StreamUpdate) SetNillableVideoCodecID(id *int) *StreamUpdate {
	if id != nil {
		su = su.SetVideoCodecID(*id)
	}
	return su
}

// SetVideoCodec sets the "video_codec" edge to the VideoCodec entity.
func (su *StreamUpdate) SetVideoCodec(v *VideoCodec) *StreamUpdate {
	return su.SetVideoCodecID(v.ID)
}

// SetAudioCodecID sets the "audio_codec" edge to the AudioCodec entity by ID.
func (su *StreamUpdate) SetAudioCodecID(id int) *StreamUpdate {
	su.mutation.SetAudioCodecID(id)
	return su
}

// SetNillableAudioCodecID sets the "audio_codec" edge to the AudioCodec entity by ID if the given value is not nil.
func (su *StreamUpdate) SetNillableAudioCodecID(id *int) *StreamUpdate {
	if id != nil {
		su = su.SetAudioCodecID(*id)
	}
	return su
}

// SetAudioCodec sets the "audio_codec" edge to the AudioCodec entity.
func (su *StreamUpdate) SetAudioCodec(a *AudioCodec) *StreamUpdate {
	return su.SetAudioCodecID(a.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (su *StreamUpdate) Mutation() *StreamMutation {
	return su.mutation
}

// ClearVideoCodec clears the "video_codec" edge to the VideoCodec entity.
func (su *StreamUpdate) ClearVideoCodec() *StreamUpdate {
	su.mutation.ClearVideoCodec()
	return su
}

// ClearAudioCodec clears the "audio_codec" edge to the AudioCodec entity.
func (su *StreamUpdate) ClearAudioCodec() *StreamUpdate {
	su.mutation.ClearAudioCodec()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StreamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StreamUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StreamUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StreamUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StreamUpdate) check() error {
	if v, ok := su.mutation.Quality(); ok {
		if err := stream.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Stream.quality": %w`, err)}
		}
	}
	if v, ok := su.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	return nil
}

func (su *StreamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stream.Table, stream.Columns, sqlgraph.NewFieldSpec(stream.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Width(); ok {
		_spec.SetField(stream.FieldWidth, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedWidth(); ok {
		_spec.AddField(stream.FieldWidth, field.TypeInt, value)
	}
	if value, ok := su.mutation.Height(); ok {
		_spec.SetField(stream.FieldHeight, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedHeight(); ok {
		_spec.AddField(stream.FieldHeight, field.TypeInt, value)
	}
	if value, ok := su.mutation.Container(); ok {
		_spec.SetField(stream.FieldContainer, field.TypeString, value)
	}
	if value, ok := su.mutation.SegmentDuration(); ok {
		_spec.SetField(stream.FieldSegmentDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSegmentDuration(); ok {
		_spec.AddField(stream.FieldSegmentDuration, field.TypeInt, value)
	}
	if value, ok := su.mutation.Quality(); ok {
		_spec.SetField(stream.FieldQuality, field.TypeEnum, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
	}
	if su.mutation.VideoCodecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.VideoCodecTable,
			Columns: []string{stream.VideoCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.VideoCodecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.VideoCodecTable,
			Columns: []string{stream.VideoCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AudioCodecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.AudioCodecTable,
			Columns: []string{stream.AudioCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiocodec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AudioCodecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.AudioCodecTable,
			Columns: []string{stream.AudioCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StreamUpdateOne is the builder for updating a single Stream entity.
type StreamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StreamMutation
}

// SetWidth sets the "width" field.
func (suo *StreamUpdateOne) SetWidth(i int) *StreamUpdateOne {
	suo.mutation.ResetWidth()
	suo.mutation.SetWidth(i)
	return suo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableWidth(i *int) *StreamUpdateOne {
	if i != nil {
		suo.SetWidth(*i)
	}
	return suo
}

// AddWidth adds i to the "width" field.
func (suo *StreamUpdateOne) AddWidth(i int) *StreamUpdateOne {
	suo.mutation.AddWidth(i)
	return suo
}

// SetHeight sets the "height" field.
func (suo *StreamUpdateOne) SetHeight(i int) *StreamUpdateOne {
	suo.mutation.ResetHeight()
	suo.mutation.SetHeight(i)
	return suo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableHeight(i *int) *StreamUpdateOne {
	if i != nil {
		suo.SetHeight(*i)
	}
	return suo
}

// AddHeight adds i to the "height" field.
func (suo *StreamUpdateOne) AddHeight(i int) *StreamUpdateOne {
	suo.mutation.AddHeight(i)
	return suo
}

// SetContainer sets the "container" field.
func (suo *StreamUpdateOne) SetContainer(s string) *StreamUpdateOne {
	suo.mutation.SetContainer(s)
	return suo
}

// SetNillableContainer sets the "container" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableContainer(s *string) *StreamUpdateOne {
	if s != nil {
		suo.SetContainer(*s)
	}
	return suo
}

// SetSegmentDuration sets the "segment_duration" field.
func (suo *StreamUpdateOne) SetSegmentDuration(i int) *StreamUpdateOne {
	suo.mutation.ResetSegmentDuration()
	suo.mutation.SetSegmentDuration(i)
	return suo
}

// SetNillableSegmentDuration sets the "segment_duration" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableSegmentDuration(i *int) *StreamUpdateOne {
	if i != nil {
		suo.SetSegmentDuration(*i)
	}
	return suo
}

// AddSegmentDuration adds i to the "segment_duration" field.
func (suo *StreamUpdateOne) AddSegmentDuration(i int) *StreamUpdateOne {
	suo.mutation.AddSegmentDuration(i)
	return suo
}

// SetQuality sets the "quality" field.
func (suo *StreamUpdateOne) SetQuality(s stream.Quality) *StreamUpdateOne {
	suo.mutation.SetQuality(s)
	return suo
}

// SetNillableQuality sets the "quality" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableQuality(s *stream.Quality) *StreamUpdateOne {
	if s != nil {
		suo.SetQuality(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *StreamUpdateOne) SetType(s stream.Type) *StreamUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableType(s *stream.Type) *StreamUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetVideoCodecID sets the "video_codec" edge to the VideoCodec entity by ID.
func (suo *StreamUpdateOne) SetVideoCodecID(id int) *StreamUpdateOne {
	suo.mutation.SetVideoCodecID(id)
	return suo
}

// SetNillableVideoCodecID sets the "video_codec" edge to the VideoCodec entity by ID if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableVideoCodecID(id *int) *StreamUpdateOne {
	if id != nil {
		suo = suo.SetVideoCodecID(*id)
	}
	return suo
}

// SetVideoCodec sets the "video_codec" edge to the VideoCodec entity.
func (suo *StreamUpdateOne) SetVideoCodec(v *VideoCodec) *StreamUpdateOne {
	return suo.SetVideoCodecID(v.ID)
}

// SetAudioCodecID sets the "audio_codec" edge to the AudioCodec entity by ID.
func (suo *StreamUpdateOne) SetAudioCodecID(id int) *StreamUpdateOne {
	suo.mutation.SetAudioCodecID(id)
	return suo
}

// SetNillableAudioCodecID sets the "audio_codec" edge to the AudioCodec entity by ID if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableAudioCodecID(id *int) *StreamUpdateOne {
	if id != nil {
		suo = suo.SetAudioCodecID(*id)
	}
	return suo
}

// SetAudioCodec sets the "audio_codec" edge to the AudioCodec entity.
func (suo *StreamUpdateOne) SetAudioCodec(a *AudioCodec) *StreamUpdateOne {
	return suo.SetAudioCodecID(a.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (suo *StreamUpdateOne) Mutation() *StreamMutation {
	return suo.mutation
}

// ClearVideoCodec clears the "video_codec" edge to the VideoCodec entity.
func (suo *StreamUpdateOne) ClearVideoCodec() *StreamUpdateOne {
	suo.mutation.ClearVideoCodec()
	return suo
}

// ClearAudioCodec clears the "audio_codec" edge to the AudioCodec entity.
func (suo *StreamUpdateOne) ClearAudioCodec() *StreamUpdateOne {
	suo.mutation.ClearAudioCodec()
	return suo
}

// Where appends a list predicates to the StreamUpdate builder.
func (suo *StreamUpdateOne) Where(ps ...predicate.Stream) *StreamUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StreamUpdateOne) Select(field string, fields ...string) *StreamUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stream entity.
func (suo *StreamUpdateOne) Save(ctx context.Context) (*Stream, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StreamUpdateOne) SaveX(ctx context.Context) *Stream {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StreamUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StreamUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StreamUpdateOne) check() error {
	if v, ok := suo.mutation.Quality(); ok {
		if err := stream.QualityValidator(v); err != nil {
			return &ValidationError{Name: "quality", err: fmt.Errorf(`ent: validator failed for field "Stream.quality": %w`, err)}
		}
	}
	if v, ok := suo.mutation.GetType(); ok {
		if err := stream.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Stream.type": %w`, err)}
		}
	}
	return nil
}

func (suo *StreamUpdateOne) sqlSave(ctx context.Context) (_node *Stream, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stream.Table, stream.Columns, sqlgraph.NewFieldSpec(stream.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stream.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stream.FieldID)
		for _, f := range fields {
			if !stream.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stream.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Width(); ok {
		_spec.SetField(stream.FieldWidth, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedWidth(); ok {
		_spec.AddField(stream.FieldWidth, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Height(); ok {
		_spec.SetField(stream.FieldHeight, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedHeight(); ok {
		_spec.AddField(stream.FieldHeight, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Container(); ok {
		_spec.SetField(stream.FieldContainer, field.TypeString, value)
	}
	if value, ok := suo.mutation.SegmentDuration(); ok {
		_spec.SetField(stream.FieldSegmentDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSegmentDuration(); ok {
		_spec.AddField(stream.FieldSegmentDuration, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Quality(); ok {
		_spec.SetField(stream.FieldQuality, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(stream.FieldType, field.TypeEnum, value)
	}
	if suo.mutation.VideoCodecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.VideoCodecTable,
			Columns: []string{stream.VideoCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.VideoCodecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.VideoCodecTable,
			Columns: []string{stream.VideoCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AudioCodecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.AudioCodecTable,
			Columns: []string{stream.AudioCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiocodec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AudioCodecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.AudioCodecTable,
			Columns: []string{stream.AudioCodecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stream{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
