// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/predicate"
	"github.com/altierawr/vstreamer/ent/videocodec"
)

// VideoCodecUpdate is the builder for updating VideoCodec entities.
type VideoCodecUpdate struct {
	config
	hooks    []Hook
	mutation *VideoCodecMutation
}

// Where appends a list predicates to the VideoCodecUpdate builder.
func (vcu *VideoCodecUpdate) Where(ps ...predicate.VideoCodec) *VideoCodecUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetName sets the "name" field.
func (vcu *VideoCodecUpdate) SetName(s string) *VideoCodecUpdate {
	vcu.mutation.SetName(s)
	return vcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vcu *VideoCodecUpdate) SetNillableName(s *string) *VideoCodecUpdate {
	if s != nil {
		vcu.SetName(*s)
	}
	return vcu
}

// SetMime sets the "mime" field.
func (vcu *VideoCodecUpdate) SetMime(s string) *VideoCodecUpdate {
	vcu.mutation.SetMime(s)
	return vcu
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (vcu *VideoCodecUpdate) SetNillableMime(s *string) *VideoCodecUpdate {
	if s != nil {
		vcu.SetMime(*s)
	}
	return vcu
}

// SetDynamicRange sets the "dynamic_range" field.
func (vcu *VideoCodecUpdate) SetDynamicRange(vr videocodec.DynamicRange) *VideoCodecUpdate {
	vcu.mutation.SetDynamicRange(vr)
	return vcu
}

// SetNillableDynamicRange sets the "dynamic_range" field if the given value is not nil.
func (vcu *VideoCodecUpdate) SetNillableDynamicRange(vr *videocodec.DynamicRange) *VideoCodecUpdate {
	if vr != nil {
		vcu.SetDynamicRange(*vr)
	}
	return vcu
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (vcu *VideoCodecUpdate) SetMediaID(id int) *VideoCodecUpdate {
	vcu.mutation.SetMediaID(id)
	return vcu
}

// SetNillableMediaID sets the "media" edge to the PlaySessionMedia entity by ID if the given value is not nil.
func (vcu *VideoCodecUpdate) SetNillableMediaID(id *int) *VideoCodecUpdate {
	if id != nil {
		vcu = vcu.SetMediaID(*id)
	}
	return vcu
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (vcu *VideoCodecUpdate) SetMedia(p *PlaySessionMedia) *VideoCodecUpdate {
	return vcu.SetMediaID(p.ID)
}

// Mutation returns the VideoCodecMutation object of the builder.
func (vcu *VideoCodecUpdate) Mutation() *VideoCodecMutation {
	return vcu.mutation
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (vcu *VideoCodecUpdate) ClearMedia() *VideoCodecUpdate {
	vcu.mutation.ClearMedia()
	return vcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VideoCodecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vcu.sqlSave, vcu.mutation, vcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VideoCodecUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VideoCodecUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VideoCodecUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcu *VideoCodecUpdate) check() error {
	if v, ok := vcu.mutation.DynamicRange(); ok {
		if err := videocodec.DynamicRangeValidator(v); err != nil {
			return &ValidationError{Name: "dynamic_range", err: fmt.Errorf(`ent: validator failed for field "VideoCodec.dynamic_range": %w`, err)}
		}
	}
	return nil
}

func (vcu *VideoCodecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(videocodec.Table, videocodec.Columns, sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt))
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.Name(); ok {
		_spec.SetField(videocodec.FieldName, field.TypeString, value)
	}
	if value, ok := vcu.mutation.Mime(); ok {
		_spec.SetField(videocodec.FieldMime, field.TypeString, value)
	}
	if value, ok := vcu.mutation.DynamicRange(); ok {
		_spec.SetField(videocodec.FieldDynamicRange, field.TypeEnum, value)
	}
	if vcu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videocodec.MediaTable,
			Columns: []string{videocodec.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videocodec.MediaTable,
			Columns: []string{videocodec.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videocodec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vcu.mutation.done = true
	return n, nil
}

// VideoCodecUpdateOne is the builder for updating a single VideoCodec entity.
type VideoCodecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoCodecMutation
}

// SetName sets the "name" field.
func (vcuo *VideoCodecUpdateOne) SetName(s string) *VideoCodecUpdateOne {
	vcuo.mutation.SetName(s)
	return vcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vcuo *VideoCodecUpdateOne) SetNillableName(s *string) *VideoCodecUpdateOne {
	if s != nil {
		vcuo.SetName(*s)
	}
	return vcuo
}

// SetMime sets the "mime" field.
func (vcuo *VideoCodecUpdateOne) SetMime(s string) *VideoCodecUpdateOne {
	vcuo.mutation.SetMime(s)
	return vcuo
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (vcuo *VideoCodecUpdateOne) SetNillableMime(s *string) *VideoCodecUpdateOne {
	if s != nil {
		vcuo.SetMime(*s)
	}
	return vcuo
}

// SetDynamicRange sets the "dynamic_range" field.
func (vcuo *VideoCodecUpdateOne) SetDynamicRange(vr videocodec.DynamicRange) *VideoCodecUpdateOne {
	vcuo.mutation.SetDynamicRange(vr)
	return vcuo
}

// SetNillableDynamicRange sets the "dynamic_range" field if the given value is not nil.
func (vcuo *VideoCodecUpdateOne) SetNillableDynamicRange(vr *videocodec.DynamicRange) *VideoCodecUpdateOne {
	if vr != nil {
		vcuo.SetDynamicRange(*vr)
	}
	return vcuo
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (vcuo *VideoCodecUpdateOne) SetMediaID(id int) *VideoCodecUpdateOne {
	vcuo.mutation.SetMediaID(id)
	return vcuo
}

// SetNillableMediaID sets the "media" edge to the PlaySessionMedia entity by ID if the given value is not nil.
func (vcuo *VideoCodecUpdateOne) SetNillableMediaID(id *int) *VideoCodecUpdateOne {
	if id != nil {
		vcuo = vcuo.SetMediaID(*id)
	}
	return vcuo
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (vcuo *VideoCodecUpdateOne) SetMedia(p *PlaySessionMedia) *VideoCodecUpdateOne {
	return vcuo.SetMediaID(p.ID)
}

// Mutation returns the VideoCodecMutation object of the builder.
func (vcuo *VideoCodecUpdateOne) Mutation() *VideoCodecMutation {
	return vcuo.mutation
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (vcuo *VideoCodecUpdateOne) ClearMedia() *VideoCodecUpdateOne {
	vcuo.mutation.ClearMedia()
	return vcuo
}

// Where appends a list predicates to the VideoCodecUpdate builder.
func (vcuo *VideoCodecUpdateOne) Where(ps ...predicate.VideoCodec) *VideoCodecUpdateOne {
	vcuo.mutation.Where(ps...)
	return vcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VideoCodecUpdateOne) Select(field string, fields ...string) *VideoCodecUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VideoCodec entity.
func (vcuo *VideoCodecUpdateOne) Save(ctx context.Context) (*VideoCodec, error) {
	return withHooks(ctx, vcuo.sqlSave, vcuo.mutation, vcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VideoCodecUpdateOne) SaveX(ctx context.Context) *VideoCodec {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VideoCodecUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VideoCodecUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcuo *VideoCodecUpdateOne) check() error {
	if v, ok := vcuo.mutation.DynamicRange(); ok {
		if err := videocodec.DynamicRangeValidator(v); err != nil {
			return &ValidationError{Name: "dynamic_range", err: fmt.Errorf(`ent: validator failed for field "VideoCodec.dynamic_range": %w`, err)}
		}
	}
	return nil
}

func (vcuo *VideoCodecUpdateOne) sqlSave(ctx context.Context) (_node *VideoCodec, err error) {
	if err := vcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(videocodec.Table, videocodec.Columns, sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt))
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoCodec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videocodec.FieldID)
		for _, f := range fields {
			if !videocodec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videocodec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.Name(); ok {
		_spec.SetField(videocodec.FieldName, field.TypeString, value)
	}
	if value, ok := vcuo.mutation.Mime(); ok {
		_spec.SetField(videocodec.FieldMime, field.TypeString, value)
	}
	if value, ok := vcuo.mutation.DynamicRange(); ok {
		_spec.SetField(videocodec.FieldDynamicRange, field.TypeEnum, value)
	}
	if vcuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videocodec.MediaTable,
			Columns: []string{videocodec.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vcuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   videocodec.MediaTable,
			Columns: []string{videocodec.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VideoCodec{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videocodec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vcuo.mutation.done = true
	return _node, nil
}
