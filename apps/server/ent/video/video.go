// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeLibrary holds the string denoting the library edge name in mutations.
	EdgeLibrary = "library"
	// Table holds the table name of the video in the database.
	Table = "videos"
	// LibraryTable is the table that holds the library relation/edge.
	LibraryTable = "videos"
	// LibraryInverseTable is the table name for the Library entity.
	// It exists in this package in order to avoid circular dependency with the "library" package.
	LibraryInverseTable = "libraries"
	// LibraryColumn is the table column denoting the library relation/edge.
	LibraryColumn = "library_videos"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldPath,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "videos"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"library_videos",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Video queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLibraryField orders the results by library field.
func ByLibraryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLibraryStep(), sql.OrderByField(field, opts...))
	}
}
func newLibraryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LibraryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LibraryTable, LibraryColumn),
	)
}
