// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/video"
)

// PlaySession is the model entity for the PlaySession schema.
type PlaySession struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaySessionQuery when eager-loading is set.
	Edges               PlaySessionEdges `json:"edges"`
	video_play_sessions *int
	selectValues        sql.SelectValues
}

// PlaySessionEdges holds the relations/edges for other nodes in the graph.
type PlaySessionEdges struct {
	// Video holds the value of the video edge.
	Video *Video `json:"video,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// VideoOrErr returns the Video value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaySessionEdges) VideoOrErr() (*Video, error) {
	if e.Video != nil {
		return e.Video, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: video.Label}
	}
	return nil, &NotLoadedError{edge: "video"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaySession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playsession.FieldID:
			values[i] = new(sql.NullInt64)
		case playsession.ForeignKeys[0]: // video_play_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaySession fields.
func (ps *PlaySession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ps.ID = int(value.Int64)
		case playsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field video_play_sessions", value)
			} else if value.Valid {
				ps.video_play_sessions = new(int)
				*ps.video_play_sessions = int(value.Int64)
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlaySession.
// This includes values selected through modifiers, order, etc.
func (ps *PlaySession) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryVideo queries the "video" edge of the PlaySession entity.
func (ps *PlaySession) QueryVideo() *VideoQuery {
	return NewPlaySessionClient(ps.config).QueryVideo(ps)
}

// Update returns a builder for updating this PlaySession.
// Note that you need to call PlaySession.Unwrap() before calling this method if this PlaySession
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PlaySession) Update() *PlaySessionUpdateOne {
	return NewPlaySessionClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PlaySession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PlaySession) Unwrap() *PlaySession {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaySession is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PlaySession) String() string {
	var builder strings.Builder
	builder.WriteString("PlaySession(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PlaySessions is a parsable slice of PlaySession.
type PlaySessions []*PlaySession
