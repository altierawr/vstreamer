// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/altierawr/vstreamer/ent/playsession"
)

// CreateLibraryInput represents a mutation input for creating libraries.
type CreateLibraryInput struct {
	Path      string
	CreatedAt *time.Time
	VideoIDs  []int
}

// Mutate applies the CreateLibraryInput on the LibraryMutation builder.
func (i *CreateLibraryInput) Mutate(m *LibraryMutation) {
	m.SetPath(i.Path)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.VideoIDs; len(v) > 0 {
		m.AddVideoIDs(v...)
	}
}

// SetInput applies the change-set in the CreateLibraryInput on the LibraryCreate builder.
func (c *LibraryCreate) SetInput(i CreateLibraryInput) *LibraryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateLibraryInput represents a mutation input for updating libraries.
type UpdateLibraryInput struct {
	Path           *string
	CreatedAt      *time.Time
	ClearVideos    bool
	AddVideoIDs    []int
	RemoveVideoIDs []int
}

// Mutate applies the UpdateLibraryInput on the LibraryMutation builder.
func (i *UpdateLibraryInput) Mutate(m *LibraryMutation) {
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearVideos {
		m.ClearVideos()
	}
	if v := i.AddVideoIDs; len(v) > 0 {
		m.AddVideoIDs(v...)
	}
	if v := i.RemoveVideoIDs; len(v) > 0 {
		m.RemoveVideoIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateLibraryInput on the LibraryUpdate builder.
func (c *LibraryUpdate) SetInput(i UpdateLibraryInput) *LibraryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateLibraryInput on the LibraryUpdateOne builder.
func (c *LibraryUpdateOne) SetInput(i UpdateLibraryInput) *LibraryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePlaySessionInput represents a mutation input for creating playsessions.
type CreatePlaySessionInput struct {
	CurrentTime *int
	State       *playsession.State
	ClientIDs   []int
	MediaID     *int
}

// Mutate applies the CreatePlaySessionInput on the PlaySessionMutation builder.
func (i *CreatePlaySessionInput) Mutate(m *PlaySessionMutation) {
	if v := i.CurrentTime; v != nil {
		m.SetCurrentTime(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.ClientIDs; len(v) > 0 {
		m.AddClientIDs(v...)
	}
	if v := i.MediaID; v != nil {
		m.SetMediaID(*v)
	}
}

// SetInput applies the change-set in the CreatePlaySessionInput on the PlaySessionCreate builder.
func (c *PlaySessionCreate) SetInput(i CreatePlaySessionInput) *PlaySessionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePlaySessionInput represents a mutation input for updating playsessions.
type UpdatePlaySessionInput struct {
	ClearCurrentTime bool
	CurrentTime      *int
	State            *playsession.State
	ClearClients     bool
	AddClientIDs     []int
	RemoveClientIDs  []int
	ClearMedia       bool
	MediaID          *int
}

// Mutate applies the UpdatePlaySessionInput on the PlaySessionMutation builder.
func (i *UpdatePlaySessionInput) Mutate(m *PlaySessionMutation) {
	if i.ClearCurrentTime {
		m.ClearCurrentTime()
	}
	if v := i.CurrentTime; v != nil {
		m.SetCurrentTime(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if i.ClearClients {
		m.ClearClients()
	}
	if v := i.AddClientIDs; len(v) > 0 {
		m.AddClientIDs(v...)
	}
	if v := i.RemoveClientIDs; len(v) > 0 {
		m.RemoveClientIDs(v...)
	}
	if i.ClearMedia {
		m.ClearMedia()
	}
	if v := i.MediaID; v != nil {
		m.SetMediaID(*v)
	}
}

// SetInput applies the change-set in the UpdatePlaySessionInput on the PlaySessionUpdate builder.
func (c *PlaySessionUpdate) SetInput(i UpdatePlaySessionInput) *PlaySessionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePlaySessionInput on the PlaySessionUpdateOne builder.
func (c *PlaySessionUpdateOne) SetInput(i UpdatePlaySessionInput) *PlaySessionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateVideoInput represents a mutation input for creating videos.
type CreateVideoInput struct {
	Path                string
	CreatedAt           *time.Time
	PlaySessionMediaIDs []int
	LibraryID           *int
}

// Mutate applies the CreateVideoInput on the VideoMutation builder.
func (i *CreateVideoInput) Mutate(m *VideoMutation) {
	m.SetPath(i.Path)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.PlaySessionMediaIDs; len(v) > 0 {
		m.AddPlaySessionMediaIDs(v...)
	}
	if v := i.LibraryID; v != nil {
		m.SetLibraryID(*v)
	}
}

// SetInput applies the change-set in the CreateVideoInput on the VideoCreate builder.
func (c *VideoCreate) SetInput(i CreateVideoInput) *VideoCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateVideoInput represents a mutation input for updating videos.
type UpdateVideoInput struct {
	Path                      *string
	CreatedAt                 *time.Time
	ClearPlaySessionMedias    bool
	AddPlaySessionMediaIDs    []int
	RemovePlaySessionMediaIDs []int
	ClearLibrary              bool
	LibraryID                 *int
}

// Mutate applies the UpdateVideoInput on the VideoMutation builder.
func (i *UpdateVideoInput) Mutate(m *VideoMutation) {
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearPlaySessionMedias {
		m.ClearPlaySessionMedias()
	}
	if v := i.AddPlaySessionMediaIDs; len(v) > 0 {
		m.AddPlaySessionMediaIDs(v...)
	}
	if v := i.RemovePlaySessionMediaIDs; len(v) > 0 {
		m.RemovePlaySessionMediaIDs(v...)
	}
	if i.ClearLibrary {
		m.ClearLibrary()
	}
	if v := i.LibraryID; v != nil {
		m.SetLibraryID(*v)
	}
}

// SetInput applies the change-set in the UpdateVideoInput on the VideoUpdate builder.
func (c *VideoUpdate) SetInput(i UpdateVideoInput) *VideoUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateVideoInput on the VideoUpdateOne builder.
func (c *VideoUpdateOne) SetInput(i UpdateVideoInput) *VideoUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
