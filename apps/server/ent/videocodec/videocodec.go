// Code generated by ent, DO NOT EDIT.

package videocodec

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the videocodec type in the database.
	Label = "video_codec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldDynamicRange holds the string denoting the dynamic_range field in the database.
	FieldDynamicRange = "dynamic_range"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// Table holds the table name of the videocodec in the database.
	Table = "video_codecs"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "video_codecs"
	// MediaInverseTable is the table name for the PlaySessionMedia entity.
	// It exists in this package in order to avoid circular dependency with the "playsessionmedia" package.
	MediaInverseTable = "play_session_media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "play_session_media_video_codecs"
)

// Columns holds all SQL columns for videocodec fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMime,
	FieldDynamicRange,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "video_codecs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"play_session_media_video_codecs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// DynamicRange defines the type for the "dynamic_range" enum field.
type DynamicRange string

// DynamicRange values.
const (
	DynamicRangeSdr DynamicRange = "sdr"
	DynamicRangeHdr DynamicRange = "hdr"
)

func (dr DynamicRange) String() string {
	return string(dr)
}

// DynamicRangeValidator is a validator for the "dynamic_range" field enum values. It is called by the builders before save.
func DynamicRangeValidator(dr DynamicRange) error {
	switch dr {
	case DynamicRangeSdr, DynamicRangeHdr:
		return nil
	default:
		return fmt.Errorf("videocodec: invalid enum value for dynamic_range field: %q", dr)
	}
}

// OrderOption defines the ordering options for the VideoCodec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMime orders the results by the mime field.
func ByMime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMime, opts...).ToFunc()
}

// ByDynamicRange orders the results by the dynamic_range field.
func ByDynamicRange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDynamicRange, opts...).ToFunc()
}

// ByMediaField orders the results by media field.
func ByMediaField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), sql.OrderByField(field, opts...))
	}
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MediaTable, MediaColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DynamicRange) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DynamicRange) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DynamicRange(str)
	if err := DynamicRangeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DynamicRange", str)
	}
	return nil
}
