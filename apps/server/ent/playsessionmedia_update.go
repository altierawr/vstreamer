// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/predicate"
	"github.com/altierawr/vstreamer/ent/video"
)

// PlaySessionMediaUpdate is the builder for updating PlaySessionMedia entities.
type PlaySessionMediaUpdate struct {
	config
	hooks    []Hook
	mutation *PlaySessionMediaMutation
}

// Where appends a list predicates to the PlaySessionMediaUpdate builder.
func (psmu *PlaySessionMediaUpdate) Where(ps ...predicate.PlaySessionMedia) *PlaySessionMediaUpdate {
	psmu.mutation.Where(ps...)
	return psmu
}

// SetVideoCodecs sets the "video_codecs" field.
func (psmu *PlaySessionMediaUpdate) SetVideoCodecs(s []string) *PlaySessionMediaUpdate {
	psmu.mutation.SetVideoCodecs(s)
	return psmu
}

// AppendVideoCodecs appends s to the "video_codecs" field.
func (psmu *PlaySessionMediaUpdate) AppendVideoCodecs(s []string) *PlaySessionMediaUpdate {
	psmu.mutation.AppendVideoCodecs(s)
	return psmu
}

// SetResolutions sets the "resolutions" field.
func (psmu *PlaySessionMediaUpdate) SetResolutions(s []string) *PlaySessionMediaUpdate {
	psmu.mutation.SetResolutions(s)
	return psmu
}

// AppendResolutions appends s to the "resolutions" field.
func (psmu *PlaySessionMediaUpdate) AppendResolutions(s []string) *PlaySessionMediaUpdate {
	psmu.mutation.AppendResolutions(s)
	return psmu
}

// AddAudioTrackIDs adds the "audio_tracks" edge to the AudioTrack entity by IDs.
func (psmu *PlaySessionMediaUpdate) AddAudioTrackIDs(ids ...int) *PlaySessionMediaUpdate {
	psmu.mutation.AddAudioTrackIDs(ids...)
	return psmu
}

// AddAudioTracks adds the "audio_tracks" edges to the AudioTrack entity.
func (psmu *PlaySessionMediaUpdate) AddAudioTracks(a ...*AudioTrack) *PlaySessionMediaUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psmu.AddAudioTrackIDs(ids...)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (psmu *PlaySessionMediaUpdate) SetVideoID(id int) *PlaySessionMediaUpdate {
	psmu.mutation.SetVideoID(id)
	return psmu
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (psmu *PlaySessionMediaUpdate) SetNillableVideoID(id *int) *PlaySessionMediaUpdate {
	if id != nil {
		psmu = psmu.SetVideoID(*id)
	}
	return psmu
}

// SetVideo sets the "video" edge to the Video entity.
func (psmu *PlaySessionMediaUpdate) SetVideo(v *Video) *PlaySessionMediaUpdate {
	return psmu.SetVideoID(v.ID)
}

// SetSessionID sets the "session" edge to the PlaySession entity by ID.
func (psmu *PlaySessionMediaUpdate) SetSessionID(id int) *PlaySessionMediaUpdate {
	psmu.mutation.SetSessionID(id)
	return psmu
}

// SetSession sets the "session" edge to the PlaySession entity.
func (psmu *PlaySessionMediaUpdate) SetSession(p *PlaySession) *PlaySessionMediaUpdate {
	return psmu.SetSessionID(p.ID)
}

// Mutation returns the PlaySessionMediaMutation object of the builder.
func (psmu *PlaySessionMediaUpdate) Mutation() *PlaySessionMediaMutation {
	return psmu.mutation
}

// ClearAudioTracks clears all "audio_tracks" edges to the AudioTrack entity.
func (psmu *PlaySessionMediaUpdate) ClearAudioTracks() *PlaySessionMediaUpdate {
	psmu.mutation.ClearAudioTracks()
	return psmu
}

// RemoveAudioTrackIDs removes the "audio_tracks" edge to AudioTrack entities by IDs.
func (psmu *PlaySessionMediaUpdate) RemoveAudioTrackIDs(ids ...int) *PlaySessionMediaUpdate {
	psmu.mutation.RemoveAudioTrackIDs(ids...)
	return psmu
}

// RemoveAudioTracks removes "audio_tracks" edges to AudioTrack entities.
func (psmu *PlaySessionMediaUpdate) RemoveAudioTracks(a ...*AudioTrack) *PlaySessionMediaUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psmu.RemoveAudioTrackIDs(ids...)
}

// ClearVideo clears the "video" edge to the Video entity.
func (psmu *PlaySessionMediaUpdate) ClearVideo() *PlaySessionMediaUpdate {
	psmu.mutation.ClearVideo()
	return psmu
}

// ClearSession clears the "session" edge to the PlaySession entity.
func (psmu *PlaySessionMediaUpdate) ClearSession() *PlaySessionMediaUpdate {
	psmu.mutation.ClearSession()
	return psmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psmu *PlaySessionMediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psmu.sqlSave, psmu.mutation, psmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psmu *PlaySessionMediaUpdate) SaveX(ctx context.Context) int {
	affected, err := psmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psmu *PlaySessionMediaUpdate) Exec(ctx context.Context) error {
	_, err := psmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psmu *PlaySessionMediaUpdate) ExecX(ctx context.Context) {
	if err := psmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psmu *PlaySessionMediaUpdate) check() error {
	if _, ok := psmu.mutation.SessionID(); psmu.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlaySessionMedia.session"`)
	}
	return nil
}

func (psmu *PlaySessionMediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playsessionmedia.Table, playsessionmedia.Columns, sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt))
	if ps := psmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psmu.mutation.VideoCodecs(); ok {
		_spec.SetField(playsessionmedia.FieldVideoCodecs, field.TypeJSON, value)
	}
	if value, ok := psmu.mutation.AppendedVideoCodecs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, playsessionmedia.FieldVideoCodecs, value)
		})
	}
	if value, ok := psmu.mutation.Resolutions(); ok {
		_spec.SetField(playsessionmedia.FieldResolutions, field.TypeJSON, value)
	}
	if value, ok := psmu.mutation.AppendedResolutions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, playsessionmedia.FieldResolutions, value)
		})
	}
	if psmu.mutation.AudioTracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmu.mutation.RemovedAudioTracksIDs(); len(nodes) > 0 && !psmu.mutation.AudioTracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmu.mutation.AudioTracksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psmu.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playsessionmedia.VideoTable,
			Columns: []string{playsessionmedia.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmu.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playsessionmedia.VideoTable,
			Columns: []string{playsessionmedia.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psmu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playsessionmedia.SessionTable,
			Columns: []string{playsessionmedia.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playsessionmedia.SessionTable,
			Columns: []string{playsessionmedia.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playsessionmedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psmu.mutation.done = true
	return n, nil
}

// PlaySessionMediaUpdateOne is the builder for updating a single PlaySessionMedia entity.
type PlaySessionMediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaySessionMediaMutation
}

// SetVideoCodecs sets the "video_codecs" field.
func (psmuo *PlaySessionMediaUpdateOne) SetVideoCodecs(s []string) *PlaySessionMediaUpdateOne {
	psmuo.mutation.SetVideoCodecs(s)
	return psmuo
}

// AppendVideoCodecs appends s to the "video_codecs" field.
func (psmuo *PlaySessionMediaUpdateOne) AppendVideoCodecs(s []string) *PlaySessionMediaUpdateOne {
	psmuo.mutation.AppendVideoCodecs(s)
	return psmuo
}

// SetResolutions sets the "resolutions" field.
func (psmuo *PlaySessionMediaUpdateOne) SetResolutions(s []string) *PlaySessionMediaUpdateOne {
	psmuo.mutation.SetResolutions(s)
	return psmuo
}

// AppendResolutions appends s to the "resolutions" field.
func (psmuo *PlaySessionMediaUpdateOne) AppendResolutions(s []string) *PlaySessionMediaUpdateOne {
	psmuo.mutation.AppendResolutions(s)
	return psmuo
}

// AddAudioTrackIDs adds the "audio_tracks" edge to the AudioTrack entity by IDs.
func (psmuo *PlaySessionMediaUpdateOne) AddAudioTrackIDs(ids ...int) *PlaySessionMediaUpdateOne {
	psmuo.mutation.AddAudioTrackIDs(ids...)
	return psmuo
}

// AddAudioTracks adds the "audio_tracks" edges to the AudioTrack entity.
func (psmuo *PlaySessionMediaUpdateOne) AddAudioTracks(a ...*AudioTrack) *PlaySessionMediaUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psmuo.AddAudioTrackIDs(ids...)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (psmuo *PlaySessionMediaUpdateOne) SetVideoID(id int) *PlaySessionMediaUpdateOne {
	psmuo.mutation.SetVideoID(id)
	return psmuo
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (psmuo *PlaySessionMediaUpdateOne) SetNillableVideoID(id *int) *PlaySessionMediaUpdateOne {
	if id != nil {
		psmuo = psmuo.SetVideoID(*id)
	}
	return psmuo
}

// SetVideo sets the "video" edge to the Video entity.
func (psmuo *PlaySessionMediaUpdateOne) SetVideo(v *Video) *PlaySessionMediaUpdateOne {
	return psmuo.SetVideoID(v.ID)
}

// SetSessionID sets the "session" edge to the PlaySession entity by ID.
func (psmuo *PlaySessionMediaUpdateOne) SetSessionID(id int) *PlaySessionMediaUpdateOne {
	psmuo.mutation.SetSessionID(id)
	return psmuo
}

// SetSession sets the "session" edge to the PlaySession entity.
func (psmuo *PlaySessionMediaUpdateOne) SetSession(p *PlaySession) *PlaySessionMediaUpdateOne {
	return psmuo.SetSessionID(p.ID)
}

// Mutation returns the PlaySessionMediaMutation object of the builder.
func (psmuo *PlaySessionMediaUpdateOne) Mutation() *PlaySessionMediaMutation {
	return psmuo.mutation
}

// ClearAudioTracks clears all "audio_tracks" edges to the AudioTrack entity.
func (psmuo *PlaySessionMediaUpdateOne) ClearAudioTracks() *PlaySessionMediaUpdateOne {
	psmuo.mutation.ClearAudioTracks()
	return psmuo
}

// RemoveAudioTrackIDs removes the "audio_tracks" edge to AudioTrack entities by IDs.
func (psmuo *PlaySessionMediaUpdateOne) RemoveAudioTrackIDs(ids ...int) *PlaySessionMediaUpdateOne {
	psmuo.mutation.RemoveAudioTrackIDs(ids...)
	return psmuo
}

// RemoveAudioTracks removes "audio_tracks" edges to AudioTrack entities.
func (psmuo *PlaySessionMediaUpdateOne) RemoveAudioTracks(a ...*AudioTrack) *PlaySessionMediaUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psmuo.RemoveAudioTrackIDs(ids...)
}

// ClearVideo clears the "video" edge to the Video entity.
func (psmuo *PlaySessionMediaUpdateOne) ClearVideo() *PlaySessionMediaUpdateOne {
	psmuo.mutation.ClearVideo()
	return psmuo
}

// ClearSession clears the "session" edge to the PlaySession entity.
func (psmuo *PlaySessionMediaUpdateOne) ClearSession() *PlaySessionMediaUpdateOne {
	psmuo.mutation.ClearSession()
	return psmuo
}

// Where appends a list predicates to the PlaySessionMediaUpdate builder.
func (psmuo *PlaySessionMediaUpdateOne) Where(ps ...predicate.PlaySessionMedia) *PlaySessionMediaUpdateOne {
	psmuo.mutation.Where(ps...)
	return psmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psmuo *PlaySessionMediaUpdateOne) Select(field string, fields ...string) *PlaySessionMediaUpdateOne {
	psmuo.fields = append([]string{field}, fields...)
	return psmuo
}

// Save executes the query and returns the updated PlaySessionMedia entity.
func (psmuo *PlaySessionMediaUpdateOne) Save(ctx context.Context) (*PlaySessionMedia, error) {
	return withHooks(ctx, psmuo.sqlSave, psmuo.mutation, psmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psmuo *PlaySessionMediaUpdateOne) SaveX(ctx context.Context) *PlaySessionMedia {
	node, err := psmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psmuo *PlaySessionMediaUpdateOne) Exec(ctx context.Context) error {
	_, err := psmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psmuo *PlaySessionMediaUpdateOne) ExecX(ctx context.Context) {
	if err := psmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psmuo *PlaySessionMediaUpdateOne) check() error {
	if _, ok := psmuo.mutation.SessionID(); psmuo.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlaySessionMedia.session"`)
	}
	return nil
}

func (psmuo *PlaySessionMediaUpdateOne) sqlSave(ctx context.Context) (_node *PlaySessionMedia, err error) {
	if err := psmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playsessionmedia.Table, playsessionmedia.Columns, sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt))
	id, ok := psmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaySessionMedia.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playsessionmedia.FieldID)
		for _, f := range fields {
			if !playsessionmedia.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playsessionmedia.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psmuo.mutation.VideoCodecs(); ok {
		_spec.SetField(playsessionmedia.FieldVideoCodecs, field.TypeJSON, value)
	}
	if value, ok := psmuo.mutation.AppendedVideoCodecs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, playsessionmedia.FieldVideoCodecs, value)
		})
	}
	if value, ok := psmuo.mutation.Resolutions(); ok {
		_spec.SetField(playsessionmedia.FieldResolutions, field.TypeJSON, value)
	}
	if value, ok := psmuo.mutation.AppendedResolutions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, playsessionmedia.FieldResolutions, value)
		})
	}
	if psmuo.mutation.AudioTracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmuo.mutation.RemovedAudioTracksIDs(); len(nodes) > 0 && !psmuo.mutation.AudioTracksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmuo.mutation.AudioTracksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psmuo.mutation.VideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playsessionmedia.VideoTable,
			Columns: []string{playsessionmedia.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmuo.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playsessionmedia.VideoTable,
			Columns: []string{playsessionmedia.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psmuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playsessionmedia.SessionTable,
			Columns: []string{playsessionmedia.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psmuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playsessionmedia.SessionTable,
			Columns: []string{playsessionmedia.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaySessionMedia{config: psmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playsessionmedia.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psmuo.mutation.done = true
	return _node, nil
}
