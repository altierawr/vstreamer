// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/video"
	"github.com/altierawr/vstreamer/ent/videocodec"
)

// PlaySessionMediaCreate is the builder for creating a PlaySessionMedia entity.
type PlaySessionMediaCreate struct {
	config
	mutation *PlaySessionMediaMutation
	hooks    []Hook
}

// SetResolutions sets the "resolutions" field.
func (psmc *PlaySessionMediaCreate) SetResolutions(s []string) *PlaySessionMediaCreate {
	psmc.mutation.SetResolutions(s)
	return psmc
}

// AddAudioTrackIDs adds the "audio_tracks" edge to the AudioTrack entity by IDs.
func (psmc *PlaySessionMediaCreate) AddAudioTrackIDs(ids ...int) *PlaySessionMediaCreate {
	psmc.mutation.AddAudioTrackIDs(ids...)
	return psmc
}

// AddAudioTracks adds the "audio_tracks" edges to the AudioTrack entity.
func (psmc *PlaySessionMediaCreate) AddAudioTracks(a ...*AudioTrack) *PlaySessionMediaCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return psmc.AddAudioTrackIDs(ids...)
}

// SetVideoID sets the "video" edge to the Video entity by ID.
func (psmc *PlaySessionMediaCreate) SetVideoID(id int) *PlaySessionMediaCreate {
	psmc.mutation.SetVideoID(id)
	return psmc
}

// SetNillableVideoID sets the "video" edge to the Video entity by ID if the given value is not nil.
func (psmc *PlaySessionMediaCreate) SetNillableVideoID(id *int) *PlaySessionMediaCreate {
	if id != nil {
		psmc = psmc.SetVideoID(*id)
	}
	return psmc
}

// SetVideo sets the "video" edge to the Video entity.
func (psmc *PlaySessionMediaCreate) SetVideo(v *Video) *PlaySessionMediaCreate {
	return psmc.SetVideoID(v.ID)
}

// SetSessionID sets the "session" edge to the PlaySession entity by ID.
func (psmc *PlaySessionMediaCreate) SetSessionID(id int) *PlaySessionMediaCreate {
	psmc.mutation.SetSessionID(id)
	return psmc
}

// SetSession sets the "session" edge to the PlaySession entity.
func (psmc *PlaySessionMediaCreate) SetSession(p *PlaySession) *PlaySessionMediaCreate {
	return psmc.SetSessionID(p.ID)
}

// AddVideoCodecIDs adds the "video_codecs" edge to the VideoCodec entity by IDs.
func (psmc *PlaySessionMediaCreate) AddVideoCodecIDs(ids ...int) *PlaySessionMediaCreate {
	psmc.mutation.AddVideoCodecIDs(ids...)
	return psmc
}

// AddVideoCodecs adds the "video_codecs" edges to the VideoCodec entity.
func (psmc *PlaySessionMediaCreate) AddVideoCodecs(v ...*VideoCodec) *PlaySessionMediaCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return psmc.AddVideoCodecIDs(ids...)
}

// Mutation returns the PlaySessionMediaMutation object of the builder.
func (psmc *PlaySessionMediaCreate) Mutation() *PlaySessionMediaMutation {
	return psmc.mutation
}

// Save creates the PlaySessionMedia in the database.
func (psmc *PlaySessionMediaCreate) Save(ctx context.Context) (*PlaySessionMedia, error) {
	psmc.defaults()
	return withHooks(ctx, psmc.sqlSave, psmc.mutation, psmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psmc *PlaySessionMediaCreate) SaveX(ctx context.Context) *PlaySessionMedia {
	v, err := psmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psmc *PlaySessionMediaCreate) Exec(ctx context.Context) error {
	_, err := psmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psmc *PlaySessionMediaCreate) ExecX(ctx context.Context) {
	if err := psmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psmc *PlaySessionMediaCreate) defaults() {
	if _, ok := psmc.mutation.Resolutions(); !ok {
		v := playsessionmedia.DefaultResolutions
		psmc.mutation.SetResolutions(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psmc *PlaySessionMediaCreate) check() error {
	if _, ok := psmc.mutation.Resolutions(); !ok {
		return &ValidationError{Name: "resolutions", err: errors.New(`ent: missing required field "PlaySessionMedia.resolutions"`)}
	}
	if _, ok := psmc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "PlaySessionMedia.session"`)}
	}
	return nil
}

func (psmc *PlaySessionMediaCreate) sqlSave(ctx context.Context) (*PlaySessionMedia, error) {
	if err := psmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psmc.mutation.id = &_node.ID
	psmc.mutation.done = true
	return _node, nil
}

func (psmc *PlaySessionMediaCreate) createSpec() (*PlaySessionMedia, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaySessionMedia{config: psmc.config}
		_spec = sqlgraph.NewCreateSpec(playsessionmedia.Table, sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt))
	)
	if value, ok := psmc.mutation.Resolutions(); ok {
		_spec.SetField(playsessionmedia.FieldResolutions, field.TypeJSON, value)
		_node.Resolutions = value
	}
	if nodes := psmc.mutation.AudioTracksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.AudioTracksTable,
			Columns: []string{playsessionmedia.AudioTracksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psmc.mutation.VideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playsessionmedia.VideoTable,
			Columns: []string{playsessionmedia.VideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.video_play_session_medias = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psmc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   playsessionmedia.SessionTable,
			Columns: []string{playsessionmedia.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.play_session_media = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psmc.mutation.VideoCodecsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsessionmedia.VideoCodecsTable,
			Columns: []string{playsessionmedia.VideoCodecsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(videocodec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaySessionMediaCreateBulk is the builder for creating many PlaySessionMedia entities in bulk.
type PlaySessionMediaCreateBulk struct {
	config
	err      error
	builders []*PlaySessionMediaCreate
}

// Save creates the PlaySessionMedia entities in the database.
func (psmcb *PlaySessionMediaCreateBulk) Save(ctx context.Context) ([]*PlaySessionMedia, error) {
	if psmcb.err != nil {
		return nil, psmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(psmcb.builders))
	nodes := make([]*PlaySessionMedia, len(psmcb.builders))
	mutators := make([]Mutator, len(psmcb.builders))
	for i := range psmcb.builders {
		func(i int, root context.Context) {
			builder := psmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaySessionMediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psmcb *PlaySessionMediaCreateBulk) SaveX(ctx context.Context) []*PlaySessionMedia {
	v, err := psmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psmcb *PlaySessionMediaCreateBulk) Exec(ctx context.Context) error {
	_, err := psmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psmcb *PlaySessionMediaCreateBulk) ExecX(ctx context.Context) {
	if err := psmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
