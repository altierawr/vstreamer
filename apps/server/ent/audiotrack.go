// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
)

// AudioTrack is the model entity for the AudioTrack schema.
type AudioTrack struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NrChannels holds the value of the "nr_channels" field.
	NrChannels int `json:"nr_channels,omitempty"`
	// ChannelLayout holds the value of the "channel_layout" field.
	ChannelLayout string `json:"channel_layout,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AudioTrackQuery when eager-loading is set.
	Edges                           AudioTrackEdges `json:"edges"`
	play_session_media_audio_tracks *int
	selectValues                    sql.SelectValues
}

// AudioTrackEdges holds the relations/edges for other nodes in the graph.
type AudioTrackEdges struct {
	// Codecs holds the value of the codecs edge.
	Codecs []*AudioCodec `json:"codecs,omitempty"`
	// Media holds the value of the media edge.
	Media *PlaySessionMedia `json:"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCodecs map[string][]*AudioCodec
}

// CodecsOrErr returns the Codecs value or an error if the edge
// was not loaded in eager-loading.
func (e AudioTrackEdges) CodecsOrErr() ([]*AudioCodec, error) {
	if e.loadedTypes[0] {
		return e.Codecs, nil
	}
	return nil, &NotLoadedError{edge: "codecs"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AudioTrackEdges) MediaOrErr() (*PlaySessionMedia, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: playsessionmedia.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AudioTrack) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case audiotrack.FieldID, audiotrack.FieldNrChannels:
			values[i] = new(sql.NullInt64)
		case audiotrack.FieldName, audiotrack.FieldChannelLayout, audiotrack.FieldLanguage:
			values[i] = new(sql.NullString)
		case audiotrack.ForeignKeys[0]: // play_session_media_audio_tracks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AudioTrack fields.
func (at *AudioTrack) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case audiotrack.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int(value.Int64)
		case audiotrack.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				at.Name = value.String
			}
		case audiotrack.FieldNrChannels:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nr_channels", values[i])
			} else if value.Valid {
				at.NrChannels = int(value.Int64)
			}
		case audiotrack.FieldChannelLayout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_layout", values[i])
			} else if value.Valid {
				at.ChannelLayout = value.String
			}
		case audiotrack.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				at.Language = value.String
			}
		case audiotrack.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field play_session_media_audio_tracks", value)
			} else if value.Valid {
				at.play_session_media_audio_tracks = new(int)
				*at.play_session_media_audio_tracks = int(value.Int64)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AudioTrack.
// This includes values selected through modifiers, order, etc.
func (at *AudioTrack) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryCodecs queries the "codecs" edge of the AudioTrack entity.
func (at *AudioTrack) QueryCodecs() *AudioCodecQuery {
	return NewAudioTrackClient(at.config).QueryCodecs(at)
}

// QueryMedia queries the "media" edge of the AudioTrack entity.
func (at *AudioTrack) QueryMedia() *PlaySessionMediaQuery {
	return NewAudioTrackClient(at.config).QueryMedia(at)
}

// Update returns a builder for updating this AudioTrack.
// Note that you need to call AudioTrack.Unwrap() before calling this method if this AudioTrack
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AudioTrack) Update() *AudioTrackUpdateOne {
	return NewAudioTrackClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AudioTrack entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AudioTrack) Unwrap() *AudioTrack {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AudioTrack is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AudioTrack) String() string {
	var builder strings.Builder
	builder.WriteString("AudioTrack(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("name=")
	builder.WriteString(at.Name)
	builder.WriteString(", ")
	builder.WriteString("nr_channels=")
	builder.WriteString(fmt.Sprintf("%v", at.NrChannels))
	builder.WriteString(", ")
	builder.WriteString("channel_layout=")
	builder.WriteString(at.ChannelLayout)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(at.Language)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCodecs returns the Codecs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (at *AudioTrack) NamedCodecs(name string) ([]*AudioCodec, error) {
	if at.Edges.namedCodecs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := at.Edges.namedCodecs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (at *AudioTrack) appendNamedCodecs(name string, edges ...*AudioCodec) {
	if at.Edges.namedCodecs == nil {
		at.Edges.namedCodecs = make(map[string][]*AudioCodec)
	}
	if len(edges) == 0 {
		at.Edges.namedCodecs[name] = []*AudioCodec{}
	} else {
		at.Edges.namedCodecs[name] = append(at.Edges.namedCodecs[name], edges...)
	}
}

// AudioTracks is a parsable slice of AudioTrack.
type AudioTracks []*AudioTrack
