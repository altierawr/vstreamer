// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/altierawr/vstreamer/ent/audiocodec"
	"github.com/altierawr/vstreamer/ent/stream"
	"github.com/altierawr/vstreamer/ent/videocodec"
)

// Stream is the model entity for the Stream schema.
type Stream struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Width holds the value of the "width" field.
	Width int `json:"width,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// Container holds the value of the "container" field.
	Container string `json:"container,omitempty"`
	// SegmentDuration holds the value of the "segment_duration" field.
	SegmentDuration int `json:"segment_duration,omitempty"`
	// Quality holds the value of the "quality" field.
	Quality stream.Quality `json:"quality,omitempty"`
	// Type holds the value of the "type" field.
	Type stream.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StreamQuery when eager-loading is set.
	Edges               StreamEdges `json:"edges"`
	audio_codec_streams *int
	video_codec_streams *int
	selectValues        sql.SelectValues
}

// StreamEdges holds the relations/edges for other nodes in the graph.
type StreamEdges struct {
	// VideoCodec holds the value of the video_codec edge.
	VideoCodec *VideoCodec `json:"video_codec,omitempty"`
	// AudioCodec holds the value of the audio_codec edge.
	AudioCodec *AudioCodec `json:"audio_codec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// VideoCodecOrErr returns the VideoCodec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StreamEdges) VideoCodecOrErr() (*VideoCodec, error) {
	if e.VideoCodec != nil {
		return e.VideoCodec, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: videocodec.Label}
	}
	return nil, &NotLoadedError{edge: "video_codec"}
}

// AudioCodecOrErr returns the AudioCodec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StreamEdges) AudioCodecOrErr() (*AudioCodec, error) {
	if e.AudioCodec != nil {
		return e.AudioCodec, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: audiocodec.Label}
	}
	return nil, &NotLoadedError{edge: "audio_codec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stream) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stream.FieldID, stream.FieldWidth, stream.FieldHeight, stream.FieldSegmentDuration:
			values[i] = new(sql.NullInt64)
		case stream.FieldContainer, stream.FieldQuality, stream.FieldType:
			values[i] = new(sql.NullString)
		case stream.ForeignKeys[0]: // audio_codec_streams
			values[i] = new(sql.NullInt64)
		case stream.ForeignKeys[1]: // video_codec_streams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stream fields.
func (s *Stream) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stream.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stream.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width", values[i])
			} else if value.Valid {
				s.Width = int(value.Int64)
			}
		case stream.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				s.Height = int(value.Int64)
			}
		case stream.FieldContainer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container", values[i])
			} else if value.Valid {
				s.Container = value.String
			}
		case stream.FieldSegmentDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field segment_duration", values[i])
			} else if value.Valid {
				s.SegmentDuration = int(value.Int64)
			}
		case stream.FieldQuality:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field quality", values[i])
			} else if value.Valid {
				s.Quality = stream.Quality(value.String)
			}
		case stream.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = stream.Type(value.String)
			}
		case stream.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field audio_codec_streams", value)
			} else if value.Valid {
				s.audio_codec_streams = new(int)
				*s.audio_codec_streams = int(value.Int64)
			}
		case stream.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field video_codec_streams", value)
			} else if value.Valid {
				s.video_codec_streams = new(int)
				*s.video_codec_streams = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stream.
// This includes values selected through modifiers, order, etc.
func (s *Stream) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryVideoCodec queries the "video_codec" edge of the Stream entity.
func (s *Stream) QueryVideoCodec() *VideoCodecQuery {
	return NewStreamClient(s.config).QueryVideoCodec(s)
}

// QueryAudioCodec queries the "audio_codec" edge of the Stream entity.
func (s *Stream) QueryAudioCodec() *AudioCodecQuery {
	return NewStreamClient(s.config).QueryAudioCodec(s)
}

// Update returns a builder for updating this Stream.
// Note that you need to call Stream.Unwrap() before calling this method if this Stream
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stream) Update() *StreamUpdateOne {
	return NewStreamClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stream entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stream) Unwrap() *Stream {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stream is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stream) String() string {
	var builder strings.Builder
	builder.WriteString("Stream(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("width=")
	builder.WriteString(fmt.Sprintf("%v", s.Width))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", s.Height))
	builder.WriteString(", ")
	builder.WriteString("container=")
	builder.WriteString(s.Container)
	builder.WriteString(", ")
	builder.WriteString("segment_duration=")
	builder.WriteString(fmt.Sprintf("%v", s.SegmentDuration))
	builder.WriteString(", ")
	builder.WriteString("quality=")
	builder.WriteString(fmt.Sprintf("%v", s.Quality))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Streams is a parsable slice of Stream.
type Streams []*Stream
