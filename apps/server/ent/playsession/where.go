// Code generated by ent, DO NOT EDIT.

package playsession

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldLTE(FieldID, id))
}

// CurrentTime applies equality check predicate on the "current_time" field. It's identical to CurrentTimeEQ.
func CurrentTime(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldEQ(FieldCurrentTime, v))
}

// CurrentTimeEQ applies the EQ predicate on the "current_time" field.
func CurrentTimeEQ(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldEQ(FieldCurrentTime, v))
}

// CurrentTimeNEQ applies the NEQ predicate on the "current_time" field.
func CurrentTimeNEQ(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNEQ(FieldCurrentTime, v))
}

// CurrentTimeIn applies the In predicate on the "current_time" field.
func CurrentTimeIn(vs ...int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldIn(FieldCurrentTime, vs...))
}

// CurrentTimeNotIn applies the NotIn predicate on the "current_time" field.
func CurrentTimeNotIn(vs ...int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNotIn(FieldCurrentTime, vs...))
}

// CurrentTimeGT applies the GT predicate on the "current_time" field.
func CurrentTimeGT(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldGT(FieldCurrentTime, v))
}

// CurrentTimeGTE applies the GTE predicate on the "current_time" field.
func CurrentTimeGTE(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldGTE(FieldCurrentTime, v))
}

// CurrentTimeLT applies the LT predicate on the "current_time" field.
func CurrentTimeLT(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldLT(FieldCurrentTime, v))
}

// CurrentTimeLTE applies the LTE predicate on the "current_time" field.
func CurrentTimeLTE(v int) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldLTE(FieldCurrentTime, v))
}

// CurrentTimeIsNil applies the IsNil predicate on the "current_time" field.
func CurrentTimeIsNil() predicate.PlaySession {
	return predicate.PlaySession(sql.FieldIsNull(FieldCurrentTime))
}

// CurrentTimeNotNil applies the NotNil predicate on the "current_time" field.
func CurrentTimeNotNil() predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNotNull(FieldCurrentTime))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.PlaySession {
	return predicate.PlaySession(sql.FieldNotIn(FieldState, vs...))
}

// HasClients applies the HasEdge predicate on the "clients" edge.
func HasClients() predicate.PlaySession {
	return predicate.PlaySession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClientsTable, ClientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientsWith applies the HasEdge predicate on the "clients" edge with a given conditions (other predicates).
func HasClientsWith(preds ...predicate.PlaybackClient) predicate.PlaySession {
	return predicate.PlaySession(func(s *sql.Selector) {
		step := newClientsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.PlaySession {
	return predicate.PlaySession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.PlaySessionMedia) predicate.PlaySession {
	return predicate.PlaySession(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlaySession) predicate.PlaySession {
	return predicate.PlaySession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlaySession) predicate.PlaySession {
	return predicate.PlaySession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlaySession) predicate.PlaySession {
	return predicate.PlaySession(sql.NotPredicates(p))
}
