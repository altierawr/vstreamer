// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// AudioTrackUpdate is the builder for updating AudioTrack entities.
type AudioTrackUpdate struct {
	config
	hooks    []Hook
	mutation *AudioTrackMutation
}

// Where appends a list predicates to the AudioTrackUpdate builder.
func (atu *AudioTrackUpdate) Where(ps ...predicate.AudioTrack) *AudioTrackUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetName sets the "name" field.
func (atu *AudioTrackUpdate) SetName(s string) *AudioTrackUpdate {
	atu.mutation.SetName(s)
	return atu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atu *AudioTrackUpdate) SetNillableName(s *string) *AudioTrackUpdate {
	if s != nil {
		atu.SetName(*s)
	}
	return atu
}

// SetNrChannels sets the "nr_channels" field.
func (atu *AudioTrackUpdate) SetNrChannels(i int) *AudioTrackUpdate {
	atu.mutation.ResetNrChannels()
	atu.mutation.SetNrChannels(i)
	return atu
}

// SetNillableNrChannels sets the "nr_channels" field if the given value is not nil.
func (atu *AudioTrackUpdate) SetNillableNrChannels(i *int) *AudioTrackUpdate {
	if i != nil {
		atu.SetNrChannels(*i)
	}
	return atu
}

// AddNrChannels adds i to the "nr_channels" field.
func (atu *AudioTrackUpdate) AddNrChannels(i int) *AudioTrackUpdate {
	atu.mutation.AddNrChannels(i)
	return atu
}

// SetChannelLayout sets the "channel_layout" field.
func (atu *AudioTrackUpdate) SetChannelLayout(s string) *AudioTrackUpdate {
	atu.mutation.SetChannelLayout(s)
	return atu
}

// SetNillableChannelLayout sets the "channel_layout" field if the given value is not nil.
func (atu *AudioTrackUpdate) SetNillableChannelLayout(s *string) *AudioTrackUpdate {
	if s != nil {
		atu.SetChannelLayout(*s)
	}
	return atu
}

// SetLanguage sets the "language" field.
func (atu *AudioTrackUpdate) SetLanguage(s string) *AudioTrackUpdate {
	atu.mutation.SetLanguage(s)
	return atu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (atu *AudioTrackUpdate) SetNillableLanguage(s *string) *AudioTrackUpdate {
	if s != nil {
		atu.SetLanguage(*s)
	}
	return atu
}

// ClearLanguage clears the value of the "language" field.
func (atu *AudioTrackUpdate) ClearLanguage() *AudioTrackUpdate {
	atu.mutation.ClearLanguage()
	return atu
}

// SetCodecs sets the "codecs" field.
func (atu *AudioTrackUpdate) SetCodecs(s []string) *AudioTrackUpdate {
	atu.mutation.SetCodecs(s)
	return atu
}

// AppendCodecs appends s to the "codecs" field.
func (atu *AudioTrackUpdate) AppendCodecs(s []string) *AudioTrackUpdate {
	atu.mutation.AppendCodecs(s)
	return atu
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (atu *AudioTrackUpdate) SetMediaID(id int) *AudioTrackUpdate {
	atu.mutation.SetMediaID(id)
	return atu
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (atu *AudioTrackUpdate) SetMedia(p *PlaySessionMedia) *AudioTrackUpdate {
	return atu.SetMediaID(p.ID)
}

// Mutation returns the AudioTrackMutation object of the builder.
func (atu *AudioTrackUpdate) Mutation() *AudioTrackMutation {
	return atu.mutation
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (atu *AudioTrackUpdate) ClearMedia() *AudioTrackUpdate {
	atu.mutation.ClearMedia()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AudioTrackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AudioTrackUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AudioTrackUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AudioTrackUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AudioTrackUpdate) check() error {
	if _, ok := atu.mutation.MediaID(); atu.mutation.MediaCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AudioTrack.media"`)
	}
	return nil
}

func (atu *AudioTrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(audiotrack.Table, audiotrack.Columns, sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Name(); ok {
		_spec.SetField(audiotrack.FieldName, field.TypeString, value)
	}
	if value, ok := atu.mutation.NrChannels(); ok {
		_spec.SetField(audiotrack.FieldNrChannels, field.TypeInt, value)
	}
	if value, ok := atu.mutation.AddedNrChannels(); ok {
		_spec.AddField(audiotrack.FieldNrChannels, field.TypeInt, value)
	}
	if value, ok := atu.mutation.ChannelLayout(); ok {
		_spec.SetField(audiotrack.FieldChannelLayout, field.TypeString, value)
	}
	if value, ok := atu.mutation.Language(); ok {
		_spec.SetField(audiotrack.FieldLanguage, field.TypeString, value)
	}
	if atu.mutation.LanguageCleared() {
		_spec.ClearField(audiotrack.FieldLanguage, field.TypeString)
	}
	if value, ok := atu.mutation.Codecs(); ok {
		_spec.SetField(audiotrack.FieldCodecs, field.TypeJSON, value)
	}
	if value, ok := atu.mutation.AppendedCodecs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, audiotrack.FieldCodecs, value)
		})
	}
	if atu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audiotrack.MediaTable,
			Columns: []string{audiotrack.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audiotrack.MediaTable,
			Columns: []string{audiotrack.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audiotrack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AudioTrackUpdateOne is the builder for updating a single AudioTrack entity.
type AudioTrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AudioTrackMutation
}

// SetName sets the "name" field.
func (atuo *AudioTrackUpdateOne) SetName(s string) *AudioTrackUpdateOne {
	atuo.mutation.SetName(s)
	return atuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (atuo *AudioTrackUpdateOne) SetNillableName(s *string) *AudioTrackUpdateOne {
	if s != nil {
		atuo.SetName(*s)
	}
	return atuo
}

// SetNrChannels sets the "nr_channels" field.
func (atuo *AudioTrackUpdateOne) SetNrChannels(i int) *AudioTrackUpdateOne {
	atuo.mutation.ResetNrChannels()
	atuo.mutation.SetNrChannels(i)
	return atuo
}

// SetNillableNrChannels sets the "nr_channels" field if the given value is not nil.
func (atuo *AudioTrackUpdateOne) SetNillableNrChannels(i *int) *AudioTrackUpdateOne {
	if i != nil {
		atuo.SetNrChannels(*i)
	}
	return atuo
}

// AddNrChannels adds i to the "nr_channels" field.
func (atuo *AudioTrackUpdateOne) AddNrChannels(i int) *AudioTrackUpdateOne {
	atuo.mutation.AddNrChannels(i)
	return atuo
}

// SetChannelLayout sets the "channel_layout" field.
func (atuo *AudioTrackUpdateOne) SetChannelLayout(s string) *AudioTrackUpdateOne {
	atuo.mutation.SetChannelLayout(s)
	return atuo
}

// SetNillableChannelLayout sets the "channel_layout" field if the given value is not nil.
func (atuo *AudioTrackUpdateOne) SetNillableChannelLayout(s *string) *AudioTrackUpdateOne {
	if s != nil {
		atuo.SetChannelLayout(*s)
	}
	return atuo
}

// SetLanguage sets the "language" field.
func (atuo *AudioTrackUpdateOne) SetLanguage(s string) *AudioTrackUpdateOne {
	atuo.mutation.SetLanguage(s)
	return atuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (atuo *AudioTrackUpdateOne) SetNillableLanguage(s *string) *AudioTrackUpdateOne {
	if s != nil {
		atuo.SetLanguage(*s)
	}
	return atuo
}

// ClearLanguage clears the value of the "language" field.
func (atuo *AudioTrackUpdateOne) ClearLanguage() *AudioTrackUpdateOne {
	atuo.mutation.ClearLanguage()
	return atuo
}

// SetCodecs sets the "codecs" field.
func (atuo *AudioTrackUpdateOne) SetCodecs(s []string) *AudioTrackUpdateOne {
	atuo.mutation.SetCodecs(s)
	return atuo
}

// AppendCodecs appends s to the "codecs" field.
func (atuo *AudioTrackUpdateOne) AppendCodecs(s []string) *AudioTrackUpdateOne {
	atuo.mutation.AppendCodecs(s)
	return atuo
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (atuo *AudioTrackUpdateOne) SetMediaID(id int) *AudioTrackUpdateOne {
	atuo.mutation.SetMediaID(id)
	return atuo
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (atuo *AudioTrackUpdateOne) SetMedia(p *PlaySessionMedia) *AudioTrackUpdateOne {
	return atuo.SetMediaID(p.ID)
}

// Mutation returns the AudioTrackMutation object of the builder.
func (atuo *AudioTrackUpdateOne) Mutation() *AudioTrackMutation {
	return atuo.mutation
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (atuo *AudioTrackUpdateOne) ClearMedia() *AudioTrackUpdateOne {
	atuo.mutation.ClearMedia()
	return atuo
}

// Where appends a list predicates to the AudioTrackUpdate builder.
func (atuo *AudioTrackUpdateOne) Where(ps ...predicate.AudioTrack) *AudioTrackUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AudioTrackUpdateOne) Select(field string, fields ...string) *AudioTrackUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AudioTrack entity.
func (atuo *AudioTrackUpdateOne) Save(ctx context.Context) (*AudioTrack, error) {
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AudioTrackUpdateOne) SaveX(ctx context.Context) *AudioTrack {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AudioTrackUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AudioTrackUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AudioTrackUpdateOne) check() error {
	if _, ok := atuo.mutation.MediaID(); atuo.mutation.MediaCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AudioTrack.media"`)
	}
	return nil
}

func (atuo *AudioTrackUpdateOne) sqlSave(ctx context.Context) (_node *AudioTrack, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(audiotrack.Table, audiotrack.Columns, sqlgraph.NewFieldSpec(audiotrack.FieldID, field.TypeInt))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AudioTrack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, audiotrack.FieldID)
		for _, f := range fields {
			if !audiotrack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != audiotrack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Name(); ok {
		_spec.SetField(audiotrack.FieldName, field.TypeString, value)
	}
	if value, ok := atuo.mutation.NrChannels(); ok {
		_spec.SetField(audiotrack.FieldNrChannels, field.TypeInt, value)
	}
	if value, ok := atuo.mutation.AddedNrChannels(); ok {
		_spec.AddField(audiotrack.FieldNrChannels, field.TypeInt, value)
	}
	if value, ok := atuo.mutation.ChannelLayout(); ok {
		_spec.SetField(audiotrack.FieldChannelLayout, field.TypeString, value)
	}
	if value, ok := atuo.mutation.Language(); ok {
		_spec.SetField(audiotrack.FieldLanguage, field.TypeString, value)
	}
	if atuo.mutation.LanguageCleared() {
		_spec.ClearField(audiotrack.FieldLanguage, field.TypeString)
	}
	if value, ok := atuo.mutation.Codecs(); ok {
		_spec.SetField(audiotrack.FieldCodecs, field.TypeJSON, value)
	}
	if value, ok := atuo.mutation.AppendedCodecs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, audiotrack.FieldCodecs, value)
		})
	}
	if atuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audiotrack.MediaTable,
			Columns: []string{audiotrack.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   audiotrack.MediaTable,
			Columns: []string{audiotrack.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AudioTrack{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{audiotrack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
