// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/altierawr/vstreamer/ent/audiocodec"
	"github.com/altierawr/vstreamer/ent/audiotrack"
	"github.com/altierawr/vstreamer/ent/library"
	"github.com/altierawr/vstreamer/ent/playbackclient"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/stream"
	"github.com/altierawr/vstreamer/ent/video"
	"github.com/altierawr/vstreamer/ent/videocodec"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AudioCodecEdge is the edge representation of AudioCodec.
type AudioCodecEdge struct {
	Node   *AudioCodec `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AudioCodecConnection is the connection containing edges to AudioCodec.
type AudioCodecConnection struct {
	Edges      []*AudioCodecEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AudioCodecConnection) build(nodes []*AudioCodec, pager *audiocodecPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AudioCodec
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AudioCodec {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AudioCodec {
			return nodes[i]
		}
	}
	c.Edges = make([]*AudioCodecEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AudioCodecEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AudioCodecPaginateOption enables pagination customization.
type AudioCodecPaginateOption func(*audiocodecPager) error

// WithAudioCodecOrder configures pagination ordering.
func WithAudioCodecOrder(order *AudioCodecOrder) AudioCodecPaginateOption {
	if order == nil {
		order = DefaultAudioCodecOrder
	}
	o := *order
	return func(pager *audiocodecPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAudioCodecOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAudioCodecFilter configures pagination filter.
func WithAudioCodecFilter(filter func(*AudioCodecQuery) (*AudioCodecQuery, error)) AudioCodecPaginateOption {
	return func(pager *audiocodecPager) error {
		if filter == nil {
			return errors.New("AudioCodecQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type audiocodecPager struct {
	reverse bool
	order   *AudioCodecOrder
	filter  func(*AudioCodecQuery) (*AudioCodecQuery, error)
}

func newAudioCodecPager(opts []AudioCodecPaginateOption, reverse bool) (*audiocodecPager, error) {
	pager := &audiocodecPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAudioCodecOrder
	}
	return pager, nil
}

func (p *audiocodecPager) applyFilter(query *AudioCodecQuery) (*AudioCodecQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *audiocodecPager) toCursor(ac *AudioCodec) Cursor {
	return p.order.Field.toCursor(ac)
}

func (p *audiocodecPager) applyCursors(query *AudioCodecQuery, after, before *Cursor) (*AudioCodecQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAudioCodecOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *audiocodecPager) applyOrder(query *AudioCodecQuery) *AudioCodecQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAudioCodecOrder.Field {
		query = query.Order(DefaultAudioCodecOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *audiocodecPager) orderExpr(query *AudioCodecQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAudioCodecOrder.Field {
			b.Comma().Ident(DefaultAudioCodecOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AudioCodec.
func (ac *AudioCodecQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AudioCodecPaginateOption,
) (*AudioCodecConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAudioCodecPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ac, err = pager.applyFilter(ac); err != nil {
		return nil, err
	}
	conn := &AudioCodecConnection{Edges: []*AudioCodecEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ac.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ac, err = pager.applyCursors(ac, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ac.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ac = pager.applyOrder(ac)
	nodes, err := ac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AudioCodecOrderField defines the ordering field of AudioCodec.
type AudioCodecOrderField struct {
	// Value extracts the ordering value from the given AudioCodec.
	Value    func(*AudioCodec) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) audiocodec.OrderOption
	toCursor func(*AudioCodec) Cursor
}

// AudioCodecOrder defines the ordering of AudioCodec.
type AudioCodecOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AudioCodecOrderField `json:"field"`
}

// DefaultAudioCodecOrder is the default ordering of AudioCodec.
var DefaultAudioCodecOrder = &AudioCodecOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AudioCodecOrderField{
		Value: func(ac *AudioCodec) (ent.Value, error) {
			return ac.ID, nil
		},
		column: audiocodec.FieldID,
		toTerm: audiocodec.ByID,
		toCursor: func(ac *AudioCodec) Cursor {
			return Cursor{ID: ac.ID}
		},
	},
}

// ToEdge converts AudioCodec into AudioCodecEdge.
func (ac *AudioCodec) ToEdge(order *AudioCodecOrder) *AudioCodecEdge {
	if order == nil {
		order = DefaultAudioCodecOrder
	}
	return &AudioCodecEdge{
		Node:   ac,
		Cursor: order.Field.toCursor(ac),
	}
}

// AudioTrackEdge is the edge representation of AudioTrack.
type AudioTrackEdge struct {
	Node   *AudioTrack `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// AudioTrackConnection is the connection containing edges to AudioTrack.
type AudioTrackConnection struct {
	Edges      []*AudioTrackEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *AudioTrackConnection) build(nodes []*AudioTrack, pager *audiotrackPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *AudioTrack
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AudioTrack {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AudioTrack {
			return nodes[i]
		}
	}
	c.Edges = make([]*AudioTrackEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AudioTrackEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AudioTrackPaginateOption enables pagination customization.
type AudioTrackPaginateOption func(*audiotrackPager) error

// WithAudioTrackOrder configures pagination ordering.
func WithAudioTrackOrder(order *AudioTrackOrder) AudioTrackPaginateOption {
	if order == nil {
		order = DefaultAudioTrackOrder
	}
	o := *order
	return func(pager *audiotrackPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAudioTrackOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAudioTrackFilter configures pagination filter.
func WithAudioTrackFilter(filter func(*AudioTrackQuery) (*AudioTrackQuery, error)) AudioTrackPaginateOption {
	return func(pager *audiotrackPager) error {
		if filter == nil {
			return errors.New("AudioTrackQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type audiotrackPager struct {
	reverse bool
	order   *AudioTrackOrder
	filter  func(*AudioTrackQuery) (*AudioTrackQuery, error)
}

func newAudioTrackPager(opts []AudioTrackPaginateOption, reverse bool) (*audiotrackPager, error) {
	pager := &audiotrackPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAudioTrackOrder
	}
	return pager, nil
}

func (p *audiotrackPager) applyFilter(query *AudioTrackQuery) (*AudioTrackQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *audiotrackPager) toCursor(at *AudioTrack) Cursor {
	return p.order.Field.toCursor(at)
}

func (p *audiotrackPager) applyCursors(query *AudioTrackQuery, after, before *Cursor) (*AudioTrackQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAudioTrackOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *audiotrackPager) applyOrder(query *AudioTrackQuery) *AudioTrackQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAudioTrackOrder.Field {
		query = query.Order(DefaultAudioTrackOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *audiotrackPager) orderExpr(query *AudioTrackQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAudioTrackOrder.Field {
			b.Comma().Ident(DefaultAudioTrackOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to AudioTrack.
func (at *AudioTrackQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AudioTrackPaginateOption,
) (*AudioTrackConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAudioTrackPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if at, err = pager.applyFilter(at); err != nil {
		return nil, err
	}
	conn := &AudioTrackConnection{Edges: []*AudioTrackEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := at.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if at, err = pager.applyCursors(at, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		at.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := at.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	at = pager.applyOrder(at)
	nodes, err := at.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// AudioTrackOrderField defines the ordering field of AudioTrack.
type AudioTrackOrderField struct {
	// Value extracts the ordering value from the given AudioTrack.
	Value    func(*AudioTrack) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) audiotrack.OrderOption
	toCursor func(*AudioTrack) Cursor
}

// AudioTrackOrder defines the ordering of AudioTrack.
type AudioTrackOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *AudioTrackOrderField `json:"field"`
}

// DefaultAudioTrackOrder is the default ordering of AudioTrack.
var DefaultAudioTrackOrder = &AudioTrackOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AudioTrackOrderField{
		Value: func(at *AudioTrack) (ent.Value, error) {
			return at.ID, nil
		},
		column: audiotrack.FieldID,
		toTerm: audiotrack.ByID,
		toCursor: func(at *AudioTrack) Cursor {
			return Cursor{ID: at.ID}
		},
	},
}

// ToEdge converts AudioTrack into AudioTrackEdge.
func (at *AudioTrack) ToEdge(order *AudioTrackOrder) *AudioTrackEdge {
	if order == nil {
		order = DefaultAudioTrackOrder
	}
	return &AudioTrackEdge{
		Node:   at,
		Cursor: order.Field.toCursor(at),
	}
}

// LibraryEdge is the edge representation of Library.
type LibraryEdge struct {
	Node   *Library `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// LibraryConnection is the connection containing edges to Library.
type LibraryConnection struct {
	Edges      []*LibraryEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *LibraryConnection) build(nodes []*Library, pager *libraryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Library
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Library {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Library {
			return nodes[i]
		}
	}
	c.Edges = make([]*LibraryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LibraryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LibraryPaginateOption enables pagination customization.
type LibraryPaginateOption func(*libraryPager) error

// WithLibraryOrder configures pagination ordering.
func WithLibraryOrder(order *LibraryOrder) LibraryPaginateOption {
	if order == nil {
		order = DefaultLibraryOrder
	}
	o := *order
	return func(pager *libraryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLibraryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLibraryFilter configures pagination filter.
func WithLibraryFilter(filter func(*LibraryQuery) (*LibraryQuery, error)) LibraryPaginateOption {
	return func(pager *libraryPager) error {
		if filter == nil {
			return errors.New("LibraryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type libraryPager struct {
	reverse bool
	order   *LibraryOrder
	filter  func(*LibraryQuery) (*LibraryQuery, error)
}

func newLibraryPager(opts []LibraryPaginateOption, reverse bool) (*libraryPager, error) {
	pager := &libraryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLibraryOrder
	}
	return pager, nil
}

func (p *libraryPager) applyFilter(query *LibraryQuery) (*LibraryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *libraryPager) toCursor(l *Library) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *libraryPager) applyCursors(query *LibraryQuery, after, before *Cursor) (*LibraryQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLibraryOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *libraryPager) applyOrder(query *LibraryQuery) *LibraryQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLibraryOrder.Field {
		query = query.Order(DefaultLibraryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *libraryPager) orderExpr(query *LibraryQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLibraryOrder.Field {
			b.Comma().Ident(DefaultLibraryOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Library.
func (l *LibraryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LibraryPaginateOption,
) (*LibraryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLibraryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}
	conn := &LibraryConnection{Edges: []*LibraryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := l.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if l, err = pager.applyCursors(l, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		l.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := l.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	l = pager.applyOrder(l)
	nodes, err := l.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LibraryOrderField defines the ordering field of Library.
type LibraryOrderField struct {
	// Value extracts the ordering value from the given Library.
	Value    func(*Library) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) library.OrderOption
	toCursor func(*Library) Cursor
}

// LibraryOrder defines the ordering of Library.
type LibraryOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *LibraryOrderField `json:"field"`
}

// DefaultLibraryOrder is the default ordering of Library.
var DefaultLibraryOrder = &LibraryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LibraryOrderField{
		Value: func(l *Library) (ent.Value, error) {
			return l.ID, nil
		},
		column: library.FieldID,
		toTerm: library.ByID,
		toCursor: func(l *Library) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Library into LibraryEdge.
func (l *Library) ToEdge(order *LibraryOrder) *LibraryEdge {
	if order == nil {
		order = DefaultLibraryOrder
	}
	return &LibraryEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// PlaySessionEdge is the edge representation of PlaySession.
type PlaySessionEdge struct {
	Node   *PlaySession `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// PlaySessionConnection is the connection containing edges to PlaySession.
type PlaySessionConnection struct {
	Edges      []*PlaySessionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *PlaySessionConnection) build(nodes []*PlaySession, pager *playsessionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PlaySession
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PlaySession {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PlaySession {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlaySessionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlaySessionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlaySessionPaginateOption enables pagination customization.
type PlaySessionPaginateOption func(*playsessionPager) error

// WithPlaySessionOrder configures pagination ordering.
func WithPlaySessionOrder(order *PlaySessionOrder) PlaySessionPaginateOption {
	if order == nil {
		order = DefaultPlaySessionOrder
	}
	o := *order
	return func(pager *playsessionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlaySessionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlaySessionFilter configures pagination filter.
func WithPlaySessionFilter(filter func(*PlaySessionQuery) (*PlaySessionQuery, error)) PlaySessionPaginateOption {
	return func(pager *playsessionPager) error {
		if filter == nil {
			return errors.New("PlaySessionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playsessionPager struct {
	reverse bool
	order   *PlaySessionOrder
	filter  func(*PlaySessionQuery) (*PlaySessionQuery, error)
}

func newPlaySessionPager(opts []PlaySessionPaginateOption, reverse bool) (*playsessionPager, error) {
	pager := &playsessionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlaySessionOrder
	}
	return pager, nil
}

func (p *playsessionPager) applyFilter(query *PlaySessionQuery) (*PlaySessionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playsessionPager) toCursor(ps *PlaySession) Cursor {
	return p.order.Field.toCursor(ps)
}

func (p *playsessionPager) applyCursors(query *PlaySessionQuery, after, before *Cursor) (*PlaySessionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlaySessionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *playsessionPager) applyOrder(query *PlaySessionQuery) *PlaySessionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlaySessionOrder.Field {
		query = query.Order(DefaultPlaySessionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *playsessionPager) orderExpr(query *PlaySessionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlaySessionOrder.Field {
			b.Comma().Ident(DefaultPlaySessionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PlaySession.
func (ps *PlaySessionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlaySessionPaginateOption,
) (*PlaySessionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlaySessionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ps, err = pager.applyFilter(ps); err != nil {
		return nil, err
	}
	conn := &PlaySessionConnection{Edges: []*PlaySessionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ps.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ps, err = pager.applyCursors(ps, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ps.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ps.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ps = pager.applyOrder(ps)
	nodes, err := ps.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlaySessionOrderField defines the ordering field of PlaySession.
type PlaySessionOrderField struct {
	// Value extracts the ordering value from the given PlaySession.
	Value    func(*PlaySession) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) playsession.OrderOption
	toCursor func(*PlaySession) Cursor
}

// PlaySessionOrder defines the ordering of PlaySession.
type PlaySessionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *PlaySessionOrderField `json:"field"`
}

// DefaultPlaySessionOrder is the default ordering of PlaySession.
var DefaultPlaySessionOrder = &PlaySessionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlaySessionOrderField{
		Value: func(ps *PlaySession) (ent.Value, error) {
			return ps.ID, nil
		},
		column: playsession.FieldID,
		toTerm: playsession.ByID,
		toCursor: func(ps *PlaySession) Cursor {
			return Cursor{ID: ps.ID}
		},
	},
}

// ToEdge converts PlaySession into PlaySessionEdge.
func (ps *PlaySession) ToEdge(order *PlaySessionOrder) *PlaySessionEdge {
	if order == nil {
		order = DefaultPlaySessionOrder
	}
	return &PlaySessionEdge{
		Node:   ps,
		Cursor: order.Field.toCursor(ps),
	}
}

// PlaySessionMediaEdge is the edge representation of PlaySessionMedia.
type PlaySessionMediaEdge struct {
	Node   *PlaySessionMedia `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// PlaySessionMediaConnection is the connection containing edges to PlaySessionMedia.
type PlaySessionMediaConnection struct {
	Edges      []*PlaySessionMediaEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *PlaySessionMediaConnection) build(nodes []*PlaySessionMedia, pager *playsessionmediaPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PlaySessionMedia
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PlaySessionMedia {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PlaySessionMedia {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlaySessionMediaEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlaySessionMediaEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlaySessionMediaPaginateOption enables pagination customization.
type PlaySessionMediaPaginateOption func(*playsessionmediaPager) error

// WithPlaySessionMediaOrder configures pagination ordering.
func WithPlaySessionMediaOrder(order *PlaySessionMediaOrder) PlaySessionMediaPaginateOption {
	if order == nil {
		order = DefaultPlaySessionMediaOrder
	}
	o := *order
	return func(pager *playsessionmediaPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlaySessionMediaOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlaySessionMediaFilter configures pagination filter.
func WithPlaySessionMediaFilter(filter func(*PlaySessionMediaQuery) (*PlaySessionMediaQuery, error)) PlaySessionMediaPaginateOption {
	return func(pager *playsessionmediaPager) error {
		if filter == nil {
			return errors.New("PlaySessionMediaQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playsessionmediaPager struct {
	reverse bool
	order   *PlaySessionMediaOrder
	filter  func(*PlaySessionMediaQuery) (*PlaySessionMediaQuery, error)
}

func newPlaySessionMediaPager(opts []PlaySessionMediaPaginateOption, reverse bool) (*playsessionmediaPager, error) {
	pager := &playsessionmediaPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlaySessionMediaOrder
	}
	return pager, nil
}

func (p *playsessionmediaPager) applyFilter(query *PlaySessionMediaQuery) (*PlaySessionMediaQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playsessionmediaPager) toCursor(psm *PlaySessionMedia) Cursor {
	return p.order.Field.toCursor(psm)
}

func (p *playsessionmediaPager) applyCursors(query *PlaySessionMediaQuery, after, before *Cursor) (*PlaySessionMediaQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlaySessionMediaOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *playsessionmediaPager) applyOrder(query *PlaySessionMediaQuery) *PlaySessionMediaQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlaySessionMediaOrder.Field {
		query = query.Order(DefaultPlaySessionMediaOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *playsessionmediaPager) orderExpr(query *PlaySessionMediaQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlaySessionMediaOrder.Field {
			b.Comma().Ident(DefaultPlaySessionMediaOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PlaySessionMedia.
func (psm *PlaySessionMediaQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlaySessionMediaPaginateOption,
) (*PlaySessionMediaConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlaySessionMediaPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if psm, err = pager.applyFilter(psm); err != nil {
		return nil, err
	}
	conn := &PlaySessionMediaConnection{Edges: []*PlaySessionMediaEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := psm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if psm, err = pager.applyCursors(psm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		psm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := psm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	psm = pager.applyOrder(psm)
	nodes, err := psm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlaySessionMediaOrderField defines the ordering field of PlaySessionMedia.
type PlaySessionMediaOrderField struct {
	// Value extracts the ordering value from the given PlaySessionMedia.
	Value    func(*PlaySessionMedia) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) playsessionmedia.OrderOption
	toCursor func(*PlaySessionMedia) Cursor
}

// PlaySessionMediaOrder defines the ordering of PlaySessionMedia.
type PlaySessionMediaOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *PlaySessionMediaOrderField `json:"field"`
}

// DefaultPlaySessionMediaOrder is the default ordering of PlaySessionMedia.
var DefaultPlaySessionMediaOrder = &PlaySessionMediaOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlaySessionMediaOrderField{
		Value: func(psm *PlaySessionMedia) (ent.Value, error) {
			return psm.ID, nil
		},
		column: playsessionmedia.FieldID,
		toTerm: playsessionmedia.ByID,
		toCursor: func(psm *PlaySessionMedia) Cursor {
			return Cursor{ID: psm.ID}
		},
	},
}

// ToEdge converts PlaySessionMedia into PlaySessionMediaEdge.
func (psm *PlaySessionMedia) ToEdge(order *PlaySessionMediaOrder) *PlaySessionMediaEdge {
	if order == nil {
		order = DefaultPlaySessionMediaOrder
	}
	return &PlaySessionMediaEdge{
		Node:   psm,
		Cursor: order.Field.toCursor(psm),
	}
}

// PlaybackClientEdge is the edge representation of PlaybackClient.
type PlaybackClientEdge struct {
	Node   *PlaybackClient `json:"node"`
	Cursor Cursor          `json:"cursor"`
}

// PlaybackClientConnection is the connection containing edges to PlaybackClient.
type PlaybackClientConnection struct {
	Edges      []*PlaybackClientEdge `json:"edges"`
	PageInfo   PageInfo              `json:"pageInfo"`
	TotalCount int                   `json:"totalCount"`
}

func (c *PlaybackClientConnection) build(nodes []*PlaybackClient, pager *playbackclientPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PlaybackClient
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PlaybackClient {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PlaybackClient {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlaybackClientEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlaybackClientEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlaybackClientPaginateOption enables pagination customization.
type PlaybackClientPaginateOption func(*playbackclientPager) error

// WithPlaybackClientOrder configures pagination ordering.
func WithPlaybackClientOrder(order *PlaybackClientOrder) PlaybackClientPaginateOption {
	if order == nil {
		order = DefaultPlaybackClientOrder
	}
	o := *order
	return func(pager *playbackclientPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlaybackClientOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlaybackClientFilter configures pagination filter.
func WithPlaybackClientFilter(filter func(*PlaybackClientQuery) (*PlaybackClientQuery, error)) PlaybackClientPaginateOption {
	return func(pager *playbackclientPager) error {
		if filter == nil {
			return errors.New("PlaybackClientQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playbackclientPager struct {
	reverse bool
	order   *PlaybackClientOrder
	filter  func(*PlaybackClientQuery) (*PlaybackClientQuery, error)
}

func newPlaybackClientPager(opts []PlaybackClientPaginateOption, reverse bool) (*playbackclientPager, error) {
	pager := &playbackclientPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlaybackClientOrder
	}
	return pager, nil
}

func (p *playbackclientPager) applyFilter(query *PlaybackClientQuery) (*PlaybackClientQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playbackclientPager) toCursor(pc *PlaybackClient) Cursor {
	return p.order.Field.toCursor(pc)
}

func (p *playbackclientPager) applyCursors(query *PlaybackClientQuery, after, before *Cursor) (*PlaybackClientQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPlaybackClientOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *playbackclientPager) applyOrder(query *PlaybackClientQuery) *PlaybackClientQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPlaybackClientOrder.Field {
		query = query.Order(DefaultPlaybackClientOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *playbackclientPager) orderExpr(query *PlaybackClientQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlaybackClientOrder.Field {
			b.Comma().Ident(DefaultPlaybackClientOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PlaybackClient.
func (pc *PlaybackClientQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlaybackClientPaginateOption,
) (*PlaybackClientConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlaybackClientPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pc, err = pager.applyFilter(pc); err != nil {
		return nil, err
	}
	conn := &PlaybackClientConnection{Edges: []*PlaybackClientEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pc, err = pager.applyCursors(pc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pc = pager.applyOrder(pc)
	nodes, err := pc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlaybackClientOrderField defines the ordering field of PlaybackClient.
type PlaybackClientOrderField struct {
	// Value extracts the ordering value from the given PlaybackClient.
	Value    func(*PlaybackClient) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) playbackclient.OrderOption
	toCursor func(*PlaybackClient) Cursor
}

// PlaybackClientOrder defines the ordering of PlaybackClient.
type PlaybackClientOrder struct {
	Direction OrderDirection            `json:"direction"`
	Field     *PlaybackClientOrderField `json:"field"`
}

// DefaultPlaybackClientOrder is the default ordering of PlaybackClient.
var DefaultPlaybackClientOrder = &PlaybackClientOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PlaybackClientOrderField{
		Value: func(pc *PlaybackClient) (ent.Value, error) {
			return pc.ID, nil
		},
		column: playbackclient.FieldID,
		toTerm: playbackclient.ByID,
		toCursor: func(pc *PlaybackClient) Cursor {
			return Cursor{ID: pc.ID}
		},
	},
}

// ToEdge converts PlaybackClient into PlaybackClientEdge.
func (pc *PlaybackClient) ToEdge(order *PlaybackClientOrder) *PlaybackClientEdge {
	if order == nil {
		order = DefaultPlaybackClientOrder
	}
	return &PlaybackClientEdge{
		Node:   pc,
		Cursor: order.Field.toCursor(pc),
	}
}

// StreamEdge is the edge representation of Stream.
type StreamEdge struct {
	Node   *Stream `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// StreamConnection is the connection containing edges to Stream.
type StreamConnection struct {
	Edges      []*StreamEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *StreamConnection) build(nodes []*Stream, pager *streamPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Stream
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Stream {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Stream {
			return nodes[i]
		}
	}
	c.Edges = make([]*StreamEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &StreamEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// StreamPaginateOption enables pagination customization.
type StreamPaginateOption func(*streamPager) error

// WithStreamOrder configures pagination ordering.
func WithStreamOrder(order *StreamOrder) StreamPaginateOption {
	if order == nil {
		order = DefaultStreamOrder
	}
	o := *order
	return func(pager *streamPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultStreamOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithStreamFilter configures pagination filter.
func WithStreamFilter(filter func(*StreamQuery) (*StreamQuery, error)) StreamPaginateOption {
	return func(pager *streamPager) error {
		if filter == nil {
			return errors.New("StreamQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type streamPager struct {
	reverse bool
	order   *StreamOrder
	filter  func(*StreamQuery) (*StreamQuery, error)
}

func newStreamPager(opts []StreamPaginateOption, reverse bool) (*streamPager, error) {
	pager := &streamPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultStreamOrder
	}
	return pager, nil
}

func (p *streamPager) applyFilter(query *StreamQuery) (*StreamQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *streamPager) toCursor(s *Stream) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *streamPager) applyCursors(query *StreamQuery, after, before *Cursor) (*StreamQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultStreamOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *streamPager) applyOrder(query *StreamQuery) *StreamQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultStreamOrder.Field {
		query = query.Order(DefaultStreamOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *streamPager) orderExpr(query *StreamQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultStreamOrder.Field {
			b.Comma().Ident(DefaultStreamOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Stream.
func (s *StreamQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...StreamPaginateOption,
) (*StreamConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newStreamPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &StreamConnection{Edges: []*StreamEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := s.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// StreamOrderField defines the ordering field of Stream.
type StreamOrderField struct {
	// Value extracts the ordering value from the given Stream.
	Value    func(*Stream) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) stream.OrderOption
	toCursor func(*Stream) Cursor
}

// StreamOrder defines the ordering of Stream.
type StreamOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *StreamOrderField `json:"field"`
}

// DefaultStreamOrder is the default ordering of Stream.
var DefaultStreamOrder = &StreamOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &StreamOrderField{
		Value: func(s *Stream) (ent.Value, error) {
			return s.ID, nil
		},
		column: stream.FieldID,
		toTerm: stream.ByID,
		toCursor: func(s *Stream) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Stream into StreamEdge.
func (s *Stream) ToEdge(order *StreamOrder) *StreamEdge {
	if order == nil {
		order = DefaultStreamOrder
	}
	return &StreamEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}

// VideoEdge is the edge representation of Video.
type VideoEdge struct {
	Node   *Video `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// VideoConnection is the connection containing edges to Video.
type VideoConnection struct {
	Edges      []*VideoEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *VideoConnection) build(nodes []*Video, pager *videoPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Video
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Video {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Video {
			return nodes[i]
		}
	}
	c.Edges = make([]*VideoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VideoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VideoPaginateOption enables pagination customization.
type VideoPaginateOption func(*videoPager) error

// WithVideoOrder configures pagination ordering.
func WithVideoOrder(order *VideoOrder) VideoPaginateOption {
	if order == nil {
		order = DefaultVideoOrder
	}
	o := *order
	return func(pager *videoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVideoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVideoFilter configures pagination filter.
func WithVideoFilter(filter func(*VideoQuery) (*VideoQuery, error)) VideoPaginateOption {
	return func(pager *videoPager) error {
		if filter == nil {
			return errors.New("VideoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type videoPager struct {
	reverse bool
	order   *VideoOrder
	filter  func(*VideoQuery) (*VideoQuery, error)
}

func newVideoPager(opts []VideoPaginateOption, reverse bool) (*videoPager, error) {
	pager := &videoPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVideoOrder
	}
	return pager, nil
}

func (p *videoPager) applyFilter(query *VideoQuery) (*VideoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *videoPager) toCursor(v *Video) Cursor {
	return p.order.Field.toCursor(v)
}

func (p *videoPager) applyCursors(query *VideoQuery, after, before *Cursor) (*VideoQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVideoOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *videoPager) applyOrder(query *VideoQuery) *VideoQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVideoOrder.Field {
		query = query.Order(DefaultVideoOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *videoPager) orderExpr(query *VideoQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVideoOrder.Field {
			b.Comma().Ident(DefaultVideoOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Video.
func (v *VideoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VideoPaginateOption,
) (*VideoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVideoPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if v, err = pager.applyFilter(v); err != nil {
		return nil, err
	}
	conn := &VideoConnection{Edges: []*VideoEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := v.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if v, err = pager.applyCursors(v, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		v.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := v.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	v = pager.applyOrder(v)
	nodes, err := v.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VideoOrderField defines the ordering field of Video.
type VideoOrderField struct {
	// Value extracts the ordering value from the given Video.
	Value    func(*Video) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) video.OrderOption
	toCursor func(*Video) Cursor
}

// VideoOrder defines the ordering of Video.
type VideoOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *VideoOrderField `json:"field"`
}

// DefaultVideoOrder is the default ordering of Video.
var DefaultVideoOrder = &VideoOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VideoOrderField{
		Value: func(v *Video) (ent.Value, error) {
			return v.ID, nil
		},
		column: video.FieldID,
		toTerm: video.ByID,
		toCursor: func(v *Video) Cursor {
			return Cursor{ID: v.ID}
		},
	},
}

// ToEdge converts Video into VideoEdge.
func (v *Video) ToEdge(order *VideoOrder) *VideoEdge {
	if order == nil {
		order = DefaultVideoOrder
	}
	return &VideoEdge{
		Node:   v,
		Cursor: order.Field.toCursor(v),
	}
}

// VideoCodecEdge is the edge representation of VideoCodec.
type VideoCodecEdge struct {
	Node   *VideoCodec `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// VideoCodecConnection is the connection containing edges to VideoCodec.
type VideoCodecConnection struct {
	Edges      []*VideoCodecEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *VideoCodecConnection) build(nodes []*VideoCodec, pager *videocodecPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *VideoCodec
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *VideoCodec {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *VideoCodec {
			return nodes[i]
		}
	}
	c.Edges = make([]*VideoCodecEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &VideoCodecEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// VideoCodecPaginateOption enables pagination customization.
type VideoCodecPaginateOption func(*videocodecPager) error

// WithVideoCodecOrder configures pagination ordering.
func WithVideoCodecOrder(order *VideoCodecOrder) VideoCodecPaginateOption {
	if order == nil {
		order = DefaultVideoCodecOrder
	}
	o := *order
	return func(pager *videocodecPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultVideoCodecOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithVideoCodecFilter configures pagination filter.
func WithVideoCodecFilter(filter func(*VideoCodecQuery) (*VideoCodecQuery, error)) VideoCodecPaginateOption {
	return func(pager *videocodecPager) error {
		if filter == nil {
			return errors.New("VideoCodecQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type videocodecPager struct {
	reverse bool
	order   *VideoCodecOrder
	filter  func(*VideoCodecQuery) (*VideoCodecQuery, error)
}

func newVideoCodecPager(opts []VideoCodecPaginateOption, reverse bool) (*videocodecPager, error) {
	pager := &videocodecPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultVideoCodecOrder
	}
	return pager, nil
}

func (p *videocodecPager) applyFilter(query *VideoCodecQuery) (*VideoCodecQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *videocodecPager) toCursor(vc *VideoCodec) Cursor {
	return p.order.Field.toCursor(vc)
}

func (p *videocodecPager) applyCursors(query *VideoCodecQuery, after, before *Cursor) (*VideoCodecQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultVideoCodecOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *videocodecPager) applyOrder(query *VideoCodecQuery) *VideoCodecQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultVideoCodecOrder.Field {
		query = query.Order(DefaultVideoCodecOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *videocodecPager) orderExpr(query *VideoCodecQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultVideoCodecOrder.Field {
			b.Comma().Ident(DefaultVideoCodecOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to VideoCodec.
func (vc *VideoCodecQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...VideoCodecPaginateOption,
) (*VideoCodecConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newVideoCodecPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if vc, err = pager.applyFilter(vc); err != nil {
		return nil, err
	}
	conn := &VideoCodecConnection{Edges: []*VideoCodecEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := vc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if vc, err = pager.applyCursors(vc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		vc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := vc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	vc = pager.applyOrder(vc)
	nodes, err := vc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// VideoCodecOrderField defines the ordering field of VideoCodec.
type VideoCodecOrderField struct {
	// Value extracts the ordering value from the given VideoCodec.
	Value    func(*VideoCodec) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) videocodec.OrderOption
	toCursor func(*VideoCodec) Cursor
}

// VideoCodecOrder defines the ordering of VideoCodec.
type VideoCodecOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *VideoCodecOrderField `json:"field"`
}

// DefaultVideoCodecOrder is the default ordering of VideoCodec.
var DefaultVideoCodecOrder = &VideoCodecOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &VideoCodecOrderField{
		Value: func(vc *VideoCodec) (ent.Value, error) {
			return vc.ID, nil
		},
		column: videocodec.FieldID,
		toTerm: videocodec.ByID,
		toCursor: func(vc *VideoCodec) Cursor {
			return Cursor{ID: vc.ID}
		},
	},
}

// ToEdge converts VideoCodec into VideoCodecEdge.
func (vc *VideoCodec) ToEdge(order *VideoCodecOrder) *VideoCodecEdge {
	if order == nil {
		order = DefaultVideoCodecOrder
	}
	return &VideoCodecEdge{
		Node:   vc,
		Cursor: order.Field.toCursor(vc),
	}
}
