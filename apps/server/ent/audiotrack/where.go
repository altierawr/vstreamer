// Code generated by ent, DO NOT EDIT.

package audiotrack

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldName, v))
}

// NrChannels applies equality check predicate on the "nr_channels" field. It's identical to NrChannelsEQ.
func NrChannels(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldNrChannels, v))
}

// ChannelLayout applies equality check predicate on the "channel_layout" field. It's identical to ChannelLayoutEQ.
func ChannelLayout(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldChannelLayout, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldLanguage, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContainsFold(FieldName, v))
}

// NrChannelsEQ applies the EQ predicate on the "nr_channels" field.
func NrChannelsEQ(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldNrChannels, v))
}

// NrChannelsNEQ applies the NEQ predicate on the "nr_channels" field.
func NrChannelsNEQ(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNEQ(FieldNrChannels, v))
}

// NrChannelsIn applies the In predicate on the "nr_channels" field.
func NrChannelsIn(vs ...int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIn(FieldNrChannels, vs...))
}

// NrChannelsNotIn applies the NotIn predicate on the "nr_channels" field.
func NrChannelsNotIn(vs ...int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotIn(FieldNrChannels, vs...))
}

// NrChannelsGT applies the GT predicate on the "nr_channels" field.
func NrChannelsGT(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGT(FieldNrChannels, v))
}

// NrChannelsGTE applies the GTE predicate on the "nr_channels" field.
func NrChannelsGTE(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGTE(FieldNrChannels, v))
}

// NrChannelsLT applies the LT predicate on the "nr_channels" field.
func NrChannelsLT(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLT(FieldNrChannels, v))
}

// NrChannelsLTE applies the LTE predicate on the "nr_channels" field.
func NrChannelsLTE(v int) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLTE(FieldNrChannels, v))
}

// ChannelLayoutEQ applies the EQ predicate on the "channel_layout" field.
func ChannelLayoutEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldChannelLayout, v))
}

// ChannelLayoutNEQ applies the NEQ predicate on the "channel_layout" field.
func ChannelLayoutNEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNEQ(FieldChannelLayout, v))
}

// ChannelLayoutIn applies the In predicate on the "channel_layout" field.
func ChannelLayoutIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIn(FieldChannelLayout, vs...))
}

// ChannelLayoutNotIn applies the NotIn predicate on the "channel_layout" field.
func ChannelLayoutNotIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotIn(FieldChannelLayout, vs...))
}

// ChannelLayoutGT applies the GT predicate on the "channel_layout" field.
func ChannelLayoutGT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGT(FieldChannelLayout, v))
}

// ChannelLayoutGTE applies the GTE predicate on the "channel_layout" field.
func ChannelLayoutGTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGTE(FieldChannelLayout, v))
}

// ChannelLayoutLT applies the LT predicate on the "channel_layout" field.
func ChannelLayoutLT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLT(FieldChannelLayout, v))
}

// ChannelLayoutLTE applies the LTE predicate on the "channel_layout" field.
func ChannelLayoutLTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLTE(FieldChannelLayout, v))
}

// ChannelLayoutContains applies the Contains predicate on the "channel_layout" field.
func ChannelLayoutContains(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContains(FieldChannelLayout, v))
}

// ChannelLayoutHasPrefix applies the HasPrefix predicate on the "channel_layout" field.
func ChannelLayoutHasPrefix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasPrefix(FieldChannelLayout, v))
}

// ChannelLayoutHasSuffix applies the HasSuffix predicate on the "channel_layout" field.
func ChannelLayoutHasSuffix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasSuffix(FieldChannelLayout, v))
}

// ChannelLayoutEqualFold applies the EqualFold predicate on the "channel_layout" field.
func ChannelLayoutEqualFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEqualFold(FieldChannelLayout, v))
}

// ChannelLayoutContainsFold applies the ContainsFold predicate on the "channel_layout" field.
func ChannelLayoutContainsFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContainsFold(FieldChannelLayout, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageIsNil applies the IsNil predicate on the "language" field.
func LanguageIsNil() predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldIsNull(FieldLanguage))
}

// LanguageNotNil applies the NotNil predicate on the "language" field.
func LanguageNotNil() predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldNotNull(FieldLanguage))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.AudioTrack {
	return predicate.AudioTrack(sql.FieldContainsFold(FieldLanguage, v))
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.AudioTrack {
	return predicate.AudioTrack(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.PlaySessionMedia) predicate.AudioTrack {
	return predicate.AudioTrack(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AudioTrack) predicate.AudioTrack {
	return predicate.AudioTrack(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AudioTrack) predicate.AudioTrack {
	return predicate.AudioTrack(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AudioTrack) predicate.AudioTrack {
	return predicate.AudioTrack(sql.NotPredicates(p))
}
