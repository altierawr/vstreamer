// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/playbackclient"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/playsessionmedia"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// PlaySessionUpdate is the builder for updating PlaySession entities.
type PlaySessionUpdate struct {
	config
	hooks    []Hook
	mutation *PlaySessionMutation
}

// Where appends a list predicates to the PlaySessionUpdate builder.
func (psu *PlaySessionUpdate) Where(ps ...predicate.PlaySession) *PlaySessionUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetCurrentTime sets the "current_time" field.
func (psu *PlaySessionUpdate) SetCurrentTime(i int) *PlaySessionUpdate {
	psu.mutation.ResetCurrentTime()
	psu.mutation.SetCurrentTime(i)
	return psu
}

// SetNillableCurrentTime sets the "current_time" field if the given value is not nil.
func (psu *PlaySessionUpdate) SetNillableCurrentTime(i *int) *PlaySessionUpdate {
	if i != nil {
		psu.SetCurrentTime(*i)
	}
	return psu
}

// AddCurrentTime adds i to the "current_time" field.
func (psu *PlaySessionUpdate) AddCurrentTime(i int) *PlaySessionUpdate {
	psu.mutation.AddCurrentTime(i)
	return psu
}

// ClearCurrentTime clears the value of the "current_time" field.
func (psu *PlaySessionUpdate) ClearCurrentTime() *PlaySessionUpdate {
	psu.mutation.ClearCurrentTime()
	return psu
}

// SetState sets the "state" field.
func (psu *PlaySessionUpdate) SetState(pl playsession.State) *PlaySessionUpdate {
	psu.mutation.SetState(pl)
	return psu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (psu *PlaySessionUpdate) SetNillableState(pl *playsession.State) *PlaySessionUpdate {
	if pl != nil {
		psu.SetState(*pl)
	}
	return psu
}

// AddClientIDs adds the "clients" edge to the PlaybackClient entity by IDs.
func (psu *PlaySessionUpdate) AddClientIDs(ids ...int) *PlaySessionUpdate {
	psu.mutation.AddClientIDs(ids...)
	return psu
}

// AddClients adds the "clients" edges to the PlaybackClient entity.
func (psu *PlaySessionUpdate) AddClients(p ...*PlaybackClient) *PlaySessionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddClientIDs(ids...)
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (psu *PlaySessionUpdate) SetMediaID(id int) *PlaySessionUpdate {
	psu.mutation.SetMediaID(id)
	return psu
}

// SetNillableMediaID sets the "media" edge to the PlaySessionMedia entity by ID if the given value is not nil.
func (psu *PlaySessionUpdate) SetNillableMediaID(id *int) *PlaySessionUpdate {
	if id != nil {
		psu = psu.SetMediaID(*id)
	}
	return psu
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (psu *PlaySessionUpdate) SetMedia(p *PlaySessionMedia) *PlaySessionUpdate {
	return psu.SetMediaID(p.ID)
}

// Mutation returns the PlaySessionMutation object of the builder.
func (psu *PlaySessionUpdate) Mutation() *PlaySessionMutation {
	return psu.mutation
}

// ClearClients clears all "clients" edges to the PlaybackClient entity.
func (psu *PlaySessionUpdate) ClearClients() *PlaySessionUpdate {
	psu.mutation.ClearClients()
	return psu
}

// RemoveClientIDs removes the "clients" edge to PlaybackClient entities by IDs.
func (psu *PlaySessionUpdate) RemoveClientIDs(ids ...int) *PlaySessionUpdate {
	psu.mutation.RemoveClientIDs(ids...)
	return psu
}

// RemoveClients removes "clients" edges to PlaybackClient entities.
func (psu *PlaySessionUpdate) RemoveClients(p ...*PlaybackClient) *PlaySessionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveClientIDs(ids...)
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (psu *PlaySessionUpdate) ClearMedia() *PlaySessionUpdate {
	psu.mutation.ClearMedia()
	return psu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PlaySessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PlaySessionUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PlaySessionUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PlaySessionUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *PlaySessionUpdate) check() error {
	if v, ok := psu.mutation.State(); ok {
		if err := playsession.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PlaySession.state": %w`, err)}
		}
	}
	return nil
}

func (psu *PlaySessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playsession.Table, playsession.Columns, sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.CurrentTime(); ok {
		_spec.SetField(playsession.FieldCurrentTime, field.TypeInt, value)
	}
	if value, ok := psu.mutation.AddedCurrentTime(); ok {
		_spec.AddField(playsession.FieldCurrentTime, field.TypeInt, value)
	}
	if psu.mutation.CurrentTimeCleared() {
		_spec.ClearField(playsession.FieldCurrentTime, field.TypeInt)
	}
	if value, ok := psu.mutation.State(); ok {
		_spec.SetField(playsession.FieldState, field.TypeEnum, value)
	}
	if psu.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedClientsIDs(); len(nodes) > 0 && !psu.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playsession.MediaTable,
			Columns: []string{playsession.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playsession.MediaTable,
			Columns: []string{playsession.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PlaySessionUpdateOne is the builder for updating a single PlaySession entity.
type PlaySessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaySessionMutation
}

// SetCurrentTime sets the "current_time" field.
func (psuo *PlaySessionUpdateOne) SetCurrentTime(i int) *PlaySessionUpdateOne {
	psuo.mutation.ResetCurrentTime()
	psuo.mutation.SetCurrentTime(i)
	return psuo
}

// SetNillableCurrentTime sets the "current_time" field if the given value is not nil.
func (psuo *PlaySessionUpdateOne) SetNillableCurrentTime(i *int) *PlaySessionUpdateOne {
	if i != nil {
		psuo.SetCurrentTime(*i)
	}
	return psuo
}

// AddCurrentTime adds i to the "current_time" field.
func (psuo *PlaySessionUpdateOne) AddCurrentTime(i int) *PlaySessionUpdateOne {
	psuo.mutation.AddCurrentTime(i)
	return psuo
}

// ClearCurrentTime clears the value of the "current_time" field.
func (psuo *PlaySessionUpdateOne) ClearCurrentTime() *PlaySessionUpdateOne {
	psuo.mutation.ClearCurrentTime()
	return psuo
}

// SetState sets the "state" field.
func (psuo *PlaySessionUpdateOne) SetState(pl playsession.State) *PlaySessionUpdateOne {
	psuo.mutation.SetState(pl)
	return psuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (psuo *PlaySessionUpdateOne) SetNillableState(pl *playsession.State) *PlaySessionUpdateOne {
	if pl != nil {
		psuo.SetState(*pl)
	}
	return psuo
}

// AddClientIDs adds the "clients" edge to the PlaybackClient entity by IDs.
func (psuo *PlaySessionUpdateOne) AddClientIDs(ids ...int) *PlaySessionUpdateOne {
	psuo.mutation.AddClientIDs(ids...)
	return psuo
}

// AddClients adds the "clients" edges to the PlaybackClient entity.
func (psuo *PlaySessionUpdateOne) AddClients(p ...*PlaybackClient) *PlaySessionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddClientIDs(ids...)
}

// SetMediaID sets the "media" edge to the PlaySessionMedia entity by ID.
func (psuo *PlaySessionUpdateOne) SetMediaID(id int) *PlaySessionUpdateOne {
	psuo.mutation.SetMediaID(id)
	return psuo
}

// SetNillableMediaID sets the "media" edge to the PlaySessionMedia entity by ID if the given value is not nil.
func (psuo *PlaySessionUpdateOne) SetNillableMediaID(id *int) *PlaySessionUpdateOne {
	if id != nil {
		psuo = psuo.SetMediaID(*id)
	}
	return psuo
}

// SetMedia sets the "media" edge to the PlaySessionMedia entity.
func (psuo *PlaySessionUpdateOne) SetMedia(p *PlaySessionMedia) *PlaySessionUpdateOne {
	return psuo.SetMediaID(p.ID)
}

// Mutation returns the PlaySessionMutation object of the builder.
func (psuo *PlaySessionUpdateOne) Mutation() *PlaySessionMutation {
	return psuo.mutation
}

// ClearClients clears all "clients" edges to the PlaybackClient entity.
func (psuo *PlaySessionUpdateOne) ClearClients() *PlaySessionUpdateOne {
	psuo.mutation.ClearClients()
	return psuo
}

// RemoveClientIDs removes the "clients" edge to PlaybackClient entities by IDs.
func (psuo *PlaySessionUpdateOne) RemoveClientIDs(ids ...int) *PlaySessionUpdateOne {
	psuo.mutation.RemoveClientIDs(ids...)
	return psuo
}

// RemoveClients removes "clients" edges to PlaybackClient entities.
func (psuo *PlaySessionUpdateOne) RemoveClients(p ...*PlaybackClient) *PlaySessionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveClientIDs(ids...)
}

// ClearMedia clears the "media" edge to the PlaySessionMedia entity.
func (psuo *PlaySessionUpdateOne) ClearMedia() *PlaySessionUpdateOne {
	psuo.mutation.ClearMedia()
	return psuo
}

// Where appends a list predicates to the PlaySessionUpdate builder.
func (psuo *PlaySessionUpdateOne) Where(ps ...predicate.PlaySession) *PlaySessionUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PlaySessionUpdateOne) Select(field string, fields ...string) *PlaySessionUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PlaySession entity.
func (psuo *PlaySessionUpdateOne) Save(ctx context.Context) (*PlaySession, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PlaySessionUpdateOne) SaveX(ctx context.Context) *PlaySession {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PlaySessionUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PlaySessionUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *PlaySessionUpdateOne) check() error {
	if v, ok := psuo.mutation.State(); ok {
		if err := playsession.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "PlaySession.state": %w`, err)}
		}
	}
	return nil
}

func (psuo *PlaySessionUpdateOne) sqlSave(ctx context.Context) (_node *PlaySession, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playsession.Table, playsession.Columns, sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaySession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playsession.FieldID)
		for _, f := range fields {
			if !playsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.CurrentTime(); ok {
		_spec.SetField(playsession.FieldCurrentTime, field.TypeInt, value)
	}
	if value, ok := psuo.mutation.AddedCurrentTime(); ok {
		_spec.AddField(playsession.FieldCurrentTime, field.TypeInt, value)
	}
	if psuo.mutation.CurrentTimeCleared() {
		_spec.ClearField(playsession.FieldCurrentTime, field.TypeInt)
	}
	if value, ok := psuo.mutation.State(); ok {
		_spec.SetField(playsession.FieldState, field.TypeEnum, value)
	}
	if psuo.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedClientsIDs(); len(nodes) > 0 && !psuo.mutation.ClientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ClientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playsession.ClientsTable,
			Columns: []string{playsession.ClientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playsession.MediaTable,
			Columns: []string{playsession.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   playsession.MediaTable,
			Columns: []string{playsession.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsessionmedia.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaySession{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
