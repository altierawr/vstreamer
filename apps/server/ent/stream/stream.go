// Code generated by ent, DO NOT EDIT.

package stream

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stream type in the database.
	Label = "stream"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldWidth holds the string denoting the width field in the database.
	FieldWidth = "width"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldContainer holds the string denoting the container field in the database.
	FieldContainer = "container"
	// FieldSegmentDuration holds the string denoting the segment_duration field in the database.
	FieldSegmentDuration = "segment_duration"
	// FieldQuality holds the string denoting the quality field in the database.
	FieldQuality = "quality"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeVideoCodec holds the string denoting the video_codec edge name in mutations.
	EdgeVideoCodec = "video_codec"
	// EdgeAudioCodec holds the string denoting the audio_codec edge name in mutations.
	EdgeAudioCodec = "audio_codec"
	// Table holds the table name of the stream in the database.
	Table = "streams"
	// VideoCodecTable is the table that holds the video_codec relation/edge.
	VideoCodecTable = "streams"
	// VideoCodecInverseTable is the table name for the VideoCodec entity.
	// It exists in this package in order to avoid circular dependency with the "videocodec" package.
	VideoCodecInverseTable = "video_codecs"
	// VideoCodecColumn is the table column denoting the video_codec relation/edge.
	VideoCodecColumn = "video_codec_streams"
	// AudioCodecTable is the table that holds the audio_codec relation/edge.
	AudioCodecTable = "streams"
	// AudioCodecInverseTable is the table name for the AudioCodec entity.
	// It exists in this package in order to avoid circular dependency with the "audiocodec" package.
	AudioCodecInverseTable = "audio_codecs"
	// AudioCodecColumn is the table column denoting the audio_codec relation/edge.
	AudioCodecColumn = "audio_codec_streams"
)

// Columns holds all SQL columns for stream fields.
var Columns = []string{
	FieldID,
	FieldWidth,
	FieldHeight,
	FieldContainer,
	FieldSegmentDuration,
	FieldQuality,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "streams"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"audio_codec_streams",
	"video_codec_streams",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Quality defines the type for the "quality" enum field.
type Quality string

// Quality values.
const (
	QualityMaximum Quality = "maximum"
	QualityMedium  Quality = "medium"
	QualityLow     Quality = "low"
)

func (q Quality) String() string {
	return string(q)
}

// QualityValidator is a validator for the "quality" field enum values. It is called by the builders before save.
func QualityValidator(q Quality) error {
	switch q {
	case QualityMaximum, QualityMedium, QualityLow:
		return nil
	default:
		return fmt.Errorf("stream: invalid enum value for quality field: %q", q)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeDirect         Type = "direct"
	TypeRemux          Type = "remux"
	TypeVideoTranscode Type = "video_transcode"
	TypeAudioTranscode Type = "audio_transcode"
	TypeFullTranscode  Type = "full_transcode"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDirect, TypeRemux, TypeVideoTranscode, TypeAudioTranscode, TypeFullTranscode:
		return nil
	default:
		return fmt.Errorf("stream: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Stream queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByWidth orders the results by the width field.
func ByWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidth, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByContainer orders the results by the container field.
func ByContainer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContainer, opts...).ToFunc()
}

// BySegmentDuration orders the results by the segment_duration field.
func BySegmentDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSegmentDuration, opts...).ToFunc()
}

// ByQuality orders the results by the quality field.
func ByQuality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuality, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVideoCodecField orders the results by video_codec field.
func ByVideoCodecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVideoCodecStep(), sql.OrderByField(field, opts...))
	}
}

// ByAudioCodecField orders the results by audio_codec field.
func ByAudioCodecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAudioCodecStep(), sql.OrderByField(field, opts...))
	}
}
func newVideoCodecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VideoCodecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, VideoCodecTable, VideoCodecColumn),
	)
}
func newAudioCodecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AudioCodecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AudioCodecTable, AudioCodecColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Quality) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Quality) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Quality(str)
	if err := QualityValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Quality", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
