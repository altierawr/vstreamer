// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/altierawr/vstreamer/ent/playbackclient"
	"github.com/altierawr/vstreamer/ent/playsession"
	"github.com/altierawr/vstreamer/ent/predicate"
)

// PlaybackClientUpdate is the builder for updating PlaybackClient entities.
type PlaybackClientUpdate struct {
	config
	hooks    []Hook
	mutation *PlaybackClientMutation
}

// Where appends a list predicates to the PlaybackClientUpdate builder.
func (pcu *PlaybackClientUpdate) Where(ps ...predicate.PlaybackClient) *PlaybackClientUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetIsBuffered sets the "is_buffered" field.
func (pcu *PlaybackClientUpdate) SetIsBuffered(b bool) *PlaybackClientUpdate {
	pcu.mutation.SetIsBuffered(b)
	return pcu
}

// SetNillableIsBuffered sets the "is_buffered" field if the given value is not nil.
func (pcu *PlaybackClientUpdate) SetNillableIsBuffered(b *bool) *PlaybackClientUpdate {
	if b != nil {
		pcu.SetIsBuffered(*b)
	}
	return pcu
}

// SetSessionID sets the "session" edge to the PlaySession entity by ID.
func (pcu *PlaybackClientUpdate) SetSessionID(id int) *PlaybackClientUpdate {
	pcu.mutation.SetSessionID(id)
	return pcu
}

// SetNillableSessionID sets the "session" edge to the PlaySession entity by ID if the given value is not nil.
func (pcu *PlaybackClientUpdate) SetNillableSessionID(id *int) *PlaybackClientUpdate {
	if id != nil {
		pcu = pcu.SetSessionID(*id)
	}
	return pcu
}

// SetSession sets the "session" edge to the PlaySession entity.
func (pcu *PlaybackClientUpdate) SetSession(p *PlaySession) *PlaybackClientUpdate {
	return pcu.SetSessionID(p.ID)
}

// Mutation returns the PlaybackClientMutation object of the builder.
func (pcu *PlaybackClientUpdate) Mutation() *PlaybackClientMutation {
	return pcu.mutation
}

// ClearSession clears the "session" edge to the PlaySession entity.
func (pcu *PlaybackClientUpdate) ClearSession() *PlaybackClientUpdate {
	pcu.mutation.ClearSession()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PlaybackClientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PlaybackClientUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PlaybackClientUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PlaybackClientUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcu *PlaybackClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playbackclient.Table, playbackclient.Columns, sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.IsBuffered(); ok {
		_spec.SetField(playbackclient.FieldIsBuffered, field.TypeBool, value)
	}
	if pcu.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playbackclient.SessionTable,
			Columns: []string{playbackclient.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playbackclient.SessionTable,
			Columns: []string{playbackclient.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playbackclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PlaybackClientUpdateOne is the builder for updating a single PlaybackClient entity.
type PlaybackClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaybackClientMutation
}

// SetIsBuffered sets the "is_buffered" field.
func (pcuo *PlaybackClientUpdateOne) SetIsBuffered(b bool) *PlaybackClientUpdateOne {
	pcuo.mutation.SetIsBuffered(b)
	return pcuo
}

// SetNillableIsBuffered sets the "is_buffered" field if the given value is not nil.
func (pcuo *PlaybackClientUpdateOne) SetNillableIsBuffered(b *bool) *PlaybackClientUpdateOne {
	if b != nil {
		pcuo.SetIsBuffered(*b)
	}
	return pcuo
}

// SetSessionID sets the "session" edge to the PlaySession entity by ID.
func (pcuo *PlaybackClientUpdateOne) SetSessionID(id int) *PlaybackClientUpdateOne {
	pcuo.mutation.SetSessionID(id)
	return pcuo
}

// SetNillableSessionID sets the "session" edge to the PlaySession entity by ID if the given value is not nil.
func (pcuo *PlaybackClientUpdateOne) SetNillableSessionID(id *int) *PlaybackClientUpdateOne {
	if id != nil {
		pcuo = pcuo.SetSessionID(*id)
	}
	return pcuo
}

// SetSession sets the "session" edge to the PlaySession entity.
func (pcuo *PlaybackClientUpdateOne) SetSession(p *PlaySession) *PlaybackClientUpdateOne {
	return pcuo.SetSessionID(p.ID)
}

// Mutation returns the PlaybackClientMutation object of the builder.
func (pcuo *PlaybackClientUpdateOne) Mutation() *PlaybackClientMutation {
	return pcuo.mutation
}

// ClearSession clears the "session" edge to the PlaySession entity.
func (pcuo *PlaybackClientUpdateOne) ClearSession() *PlaybackClientUpdateOne {
	pcuo.mutation.ClearSession()
	return pcuo
}

// Where appends a list predicates to the PlaybackClientUpdate builder.
func (pcuo *PlaybackClientUpdateOne) Where(ps ...predicate.PlaybackClient) *PlaybackClientUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PlaybackClientUpdateOne) Select(field string, fields ...string) *PlaybackClientUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PlaybackClient entity.
func (pcuo *PlaybackClientUpdateOne) Save(ctx context.Context) (*PlaybackClient, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PlaybackClientUpdateOne) SaveX(ctx context.Context) *PlaybackClient {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PlaybackClientUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PlaybackClientUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcuo *PlaybackClientUpdateOne) sqlSave(ctx context.Context) (_node *PlaybackClient, err error) {
	_spec := sqlgraph.NewUpdateSpec(playbackclient.Table, playbackclient.Columns, sqlgraph.NewFieldSpec(playbackclient.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaybackClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playbackclient.FieldID)
		for _, f := range fields {
			if !playbackclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playbackclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.IsBuffered(); ok {
		_spec.SetField(playbackclient.FieldIsBuffered, field.TypeBool, value)
	}
	if pcuo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playbackclient.SessionTable,
			Columns: []string{playbackclient.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playbackclient.SessionTable,
			Columns: []string{playbackclient.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playsession.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaybackClient{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playbackclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
